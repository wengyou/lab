{"ast":null,"code":"import axios from\"axios\";import qs from\"qs\";var showStatus=function showStatus(status){var msg={400:'请求错误(400)',401:'未授权,请重新登录(401)',403:'拒绝访问(403)',404:'请求出错(404)',408:'请求超时(408)',500:'服务器错误(500)',501:'服务未实现(501)',502:'网络错误(502)',503:'服务不可用(503)',504:'网络超时(504)',505:'HTTP版本不受支持(505)'};if(status in msg){return\"\".concat(msg[status],\",\\u8BF7\\u68C0\\u67E5\\u7F51\\u7EDC\\u6216\\u8054\\u7CFB\\u7BA1\\u7406\\u5458\");}else{return\"\\u8FDE\\u63A5\\u51FA\\u9519(\".concat(status,\"),\\u8BF7\\u68C0\\u67E5\\u7F51\\u7EDC\\u6216\\u8054\\u7CFB\\u7BA1\\u7406\\u5458\");}};var Service=axios.create({//基本域名 生产环境 ？ “线上服务器域名” ： “本地开发测试域名”\n// baseURL: process.env.NODE_ENV === 'production' ? 'http://127.0.0.1:8080/':'http://127.0.0.1:8080/',\nbaseURL:process.env.NODE_ENV==='production'?'http://49.235.20.228:8080/':'http://49.235.20.228:8080/',//baseURL: 'http://localhost:8080/',\nheaders:{get:{'Content-Type':'application/x-www-form-urlencoded;charset=utf-8'},post:{'Content-Type':'application/x-www-form-urlencoded;charset=utf-8'// 'Content-Type': 'application/json'\n}},timeout:30000,transformRequest:[function(data){// data = JSON.stringify(data);\nif(Object.prototype.toString.call(data)!=='[object FormData]')data=qs.stringify(data);// data = JSON.stringify(data)\n// console.log(data.prototype);\nreturn data;}],validateStatus:function validateStatus(){// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常\nreturn true;},transformResponse:[function(data){if(typeof data==='string'&&data.startsWith('{')){data=JSON.parse(data);}return data;}]});//请求拦截器\nService.interceptors.request.use(function(config){var isServer=typeof window==='undefined';if(!isServer){var token=window.localStorage.getItem('access');if(token){config.headers.common['token']=token;}}return config;},function(error){error.data={};error.data.msg='服务器异常请联系管理员!';return Promise.resolve(error);});//响应拦截器\nService.interceptors.response.use(function(response){var status=response.status;var message='';if(status<200||status>=300){message=showStatus(status);if(typeof response.data==='string'){response.data={message:message};}else{response.data.message=message;}}return response;},function(error){error.data={};error.data.msg='请求超时或服务器异常,请检查网络或联系管理员!';return Promise.resolve(error);});export default Service;","map":{"version":3,"sources":["C:/projects/lab/lab_2.0/src/lib/Service.js"],"names":["axios","qs","showStatus","status","msg","Service","create","baseURL","process","env","NODE_ENV","headers","get","post","timeout","transformRequest","data","Object","prototype","toString","call","stringify","validateStatus","transformResponse","startsWith","JSON","parse","interceptors","request","use","config","isServer","window","token","localStorage","getItem","common","error","Promise","resolve","response","message"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport qs from \"qs\";\r\n\r\nconst showStatus = (status) => {\r\n    const msg = {\r\n        400: '请求错误(400)',\r\n        401: '未授权,请重新登录(401)',\r\n        403: '拒绝访问(403)',\r\n        404: '请求出错(404)',\r\n        408: '请求超时(408)',\r\n        500: '服务器错误(500)',\r\n        501: '服务未实现(501)',\r\n        502: '网络错误(502)',\r\n        503: '服务不可用(503)',\r\n        504: '网络超时(504)',\r\n        505: 'HTTP版本不受支持(505)'\r\n    };\r\n    if (status in msg) {\r\n        return `${msg[status]},请检查网络或联系管理员`\r\n    } else {\r\n        return `连接出错(${status}),请检查网络或联系管理员`\r\n    }\r\n};\r\n\r\nconst Service = axios.create({\r\n    //基本域名 生产环境 ？ “线上服务器域名” ： “本地开发测试域名”\r\n    // baseURL: process.env.NODE_ENV === 'production' ? 'http://127.0.0.1:8080/':'http://127.0.0.1:8080/',\r\n    baseURL: process.env.NODE_ENV === 'production' ? 'http://49.235.20.228:8080/':'http://49.235.20.228:8080/',\r\n    //baseURL: 'http://localhost:8080/',\r\n        headers: {\r\n            get: {\r\n                'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n            },\r\n            post: {\r\n                'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n                // 'Content-Type': 'application/json'\r\n            }\r\n        },\r\n    timeout: 30000,\r\n    transformRequest: [ data => {\r\n        // data = JSON.stringify(data);\r\n        if(Object.prototype.toString.call(data) !== '[object FormData]') data = qs.stringify(data);\r\n        // data = JSON.stringify(data)\r\n        // console.log(data.prototype);\r\n        return data\r\n    }],\r\n    validateStatus () {\r\n        // 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常\r\n        return true\r\n    },\r\n    transformResponse: [(data) => {\r\n        if (typeof data === 'string' && data.startsWith('{')) {\r\n            data = JSON.parse(data)\r\n        }\r\n        return data\r\n    }]\r\n});\r\n//请求拦截器\r\nService.interceptors.request.use(config => {\r\n    const isServer = typeof window === 'undefined';\r\n    if (!isServer) {\r\n        const token = window.localStorage.getItem('access');\r\n        if (token) {\r\n            config.headers.common['token'] = token;\r\n        }\r\n    }\r\n    return config\r\n},error => {\r\n    error.data = {};\r\n    error.data.msg = '服务器异常请联系管理员!';\r\n    return Promise.resolve(error);\r\n});\r\n//响应拦截器\r\nService.interceptors.response.use(response => {\r\n    const status = response.status;\r\n    let message = '';\r\n    if (status < 200 || status >= 300) {\r\n        message = showStatus(status);\r\n        if (typeof response.data === 'string') {\r\n            response.data = { message };\r\n        } else {\r\n            response.data.message = message;\r\n        }\r\n    }\r\n    return response;\r\n},error => {\r\n    error.data = {};\r\n    error.data.msg = '请求超时或服务器异常,请检查网络或联系管理员!';\r\n    return Promise.resolve(error)\r\n});\r\n\r\nexport default Service;\r\n"]},"metadata":{},"sourceType":"module"}