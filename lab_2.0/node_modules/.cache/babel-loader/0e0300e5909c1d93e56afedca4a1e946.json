{"ast":null,"code":"import \"antd/es/table/style/css\";\nimport _Table from \"antd/es/table\";\nimport _slicedToArray from \"C:\\\\projects\\\\lab\\\\lab_2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\projects\\\\lab\\\\lab_2.0\\\\src\\\\components\\\\StudentTable.js\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"../static/style/search.scss\";\nimport * as resource from \"../redux/actionCreators/resource\";\nimport * as admin from \"../redux/actionCreators/admin\";\n\nvar StudentTable = function StudentTable(props) {\n  var studentMessage = props.studentMessage,\n      total = props.total,\n      handleSearchStudent = props.handleSearchStudent,\n      userId = props.userId,\n      userName = props.userName,\n      page = props.page,\n      resetPassword = props.resetPassword;\n\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      current = _useState2[0],\n      setCurrent = _useState2[1];\n\n  useEffect(function () {\n    setCurrent(page);\n  }, [page]);\n  var columns = [{\n    key: '1',\n    title: '学号',\n    dataIndex: 'userId'\n  }, {\n    key: '2',\n    title: '学生姓名',\n    dataIndex: 'userName'\n  }, {\n    key: '3',\n    title: '性别',\n    dataIndex: 'sex'\n  }, // {\n  //     title: '登录密码',\n  //     dataIndex: '',\n  // },\n  {\n    key: '4',\n    title: '',\n    dataIndex: 'resetPassword',\n    render: function render(text, record) {\n      return /*#__PURE__*/React.createElement(\"a\", {\n        onClick: function onClick() {\n          resetPassword({\n            'id': record.userId,\n            'userId': userId\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }\n      }, \"\\u91CD\\u7F6E\\u5BC6\\u7801\");\n    }\n  }];\n  var rowSelection = {\n    onChange: function onChange(selectedRowKeys, selectedRows) {\n      console.log(\"selectedRowKeys: \".concat(selectedRowKeys), 'selectedRows: ', selectedRows);\n    },\n    getCheckboxProps: function getCheckboxProps(record) {\n      return {\n        disabled: record.name === 'Disabled User',\n        // Column configuration not to be checked\n        name: record.name\n      };\n    }\n  };\n  return /*#__PURE__*/React.createElement(_Table, {\n    rowKey: function rowKey(record) {\n      return record.id;\n    },\n    dataSource: studentMessage,\n    rowSelection: rowSelection,\n    columns: columns,\n    pagination: {\n      current: current,\n      total: total,\n      pageSize: 10,\n      onChange: function onChange(e) {\n        handleSearchStudent({\n          page: e,\n          type: \"student\",\n          userId: userId,\n          userName: userName\n        });\n      },\n      defaultCurrent: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default connect(function (state) {\n  return {\n    studentMessage: state.getIn([\"resource\", \"resource\", \"studentMessage\"]),\n    total: state.getIn([\"resource\", \"resource\", \"studentTotal\"]),\n    userId: state.getIn([\"resource\", \"resource\", \"studentId\"]),\n    userName: state.getIn([\"resource\", \"resource\", \"studentName\"]),\n    page: state.getIn([\"resource\", \"resource\", \"page\"]),\n    reUserId: state.getIn(['userMana'])\n  };\n}, function (dispatch) {\n  return {\n    handleSearchStudent: function handleSearchStudent(args) {\n      dispatch(resource.fetchStudentMes(args));\n    },\n    resetPassword: function resetPassword(args) {\n      dispatch(admin.resetPassword(args));\n    }\n  };\n})(StudentTable);","map":{"version":3,"sources":["C:/projects/lab/lab_2.0/src/components/StudentTable.js"],"names":["React","useEffect","useRef","useState","connect","resource","admin","StudentTable","props","studentMessage","total","handleSearchStudent","userId","userName","page","resetPassword","current","setCurrent","columns","key","title","dataIndex","render","text","record","rowSelection","onChange","selectedRowKeys","selectedRows","console","log","getCheckboxProps","disabled","name","id","pageSize","e","type","defaultCurrent","state","getIn","reUserId","dispatch","args","fetchStudentMes"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../static/style/search.scss\";\r\nimport { Table } from 'antd';\r\nimport * as resource from \"../redux/actionCreators/resource\";\r\nimport * as admin from \"../redux/actionCreators/admin\";\r\n\r\nconst StudentTable = props => {\r\n    const {studentMessage, total, handleSearchStudent, userId, userName, page, resetPassword} = props;\r\n    const [current, setCurrent] = useState(1);\r\n    useEffect(()=>{\r\n        setCurrent(page);\r\n    },[page]);\r\n    const columns = [\r\n        {\r\n            key: '1',\r\n            title: '学号',\r\n            dataIndex: 'userId',\r\n        },\r\n        {\r\n            key: '2',\r\n            title: '学生姓名',\r\n            dataIndex: 'userName',\r\n        },\r\n        {\r\n            key: '3',\r\n            title: '性别',\r\n            dataIndex: 'sex',\r\n        },\r\n        // {\r\n        //     title: '登录密码',\r\n        //     dataIndex: '',\r\n        // },\r\n        {\r\n            key: '4',\r\n            title: '',\r\n            dataIndex: 'resetPassword',  \r\n            render: (text, record) => {\r\n                return (<a \r\n                            onClick={() => {resetPassword({'id': record.userId, 'userId': userId})}}\r\n                        >\r\n                                重置密码\r\n                        </a>)\r\n                \r\n            }\r\n        }\r\n    ];\r\n    const rowSelection = {\r\n        onChange: (selectedRowKeys, selectedRows) => {\r\n            console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\r\n        },\r\n        getCheckboxProps: record => ({\r\n            disabled: record.name === 'Disabled User', // Column configuration not to be checked\r\n            name: record.name,\r\n        }),\r\n    };\r\n\r\n    return(\r\n        <Table\r\n            rowKey={record => record.id}\r\n            dataSource={studentMessage}\r\n            rowSelection={rowSelection}\r\n            columns={columns}\r\n            pagination={\r\n                {\r\n                    current,\r\n                    total,\r\n                    pageSize: 10,\r\n                    onChange: e => {\r\n                            handleSearchStudent({\r\n                                page: e,\r\n                                type: \"student\",\r\n                                userId,\r\n                                userName\r\n                            })\r\n                    },\r\n                    defaultCurrent: 1,\r\n                }\r\n            }\r\n        />\r\n    )\r\n};\r\n\r\nexport default connect(\r\n    state => ({\r\n        studentMessage: state.getIn([\"resource\", \"resource\", \"studentMessage\"]),\r\n        total: state.getIn([\"resource\", \"resource\", \"studentTotal\"]),\r\n        userId: state.getIn([\"resource\", \"resource\", \"studentId\"]),\r\n        userName: state.getIn([\"resource\", \"resource\", \"studentName\"]),\r\n        page: state.getIn([\"resource\", \"resource\", \"page\"]),\r\n        reUserId: state.getIn(['userMana'])\r\n    }),\r\n    dispatch => ({\r\n        handleSearchStudent(args){\r\n            dispatch(resource.fetchStudentMes(args))\r\n        },\r\n        resetPassword(args) {\r\n            dispatch(admin.resetPassword(args))\r\n        }\r\n    })\r\n)(StudentTable);"]},"metadata":{},"sourceType":"module"}