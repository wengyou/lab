{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\projects\\\\lab\\\\lab_2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(uploadData),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(rootResourceSagas);import{takeEvery,call,put}from\"redux-saga/effects\";import{FETCH_UPLOAD_RES,FETCH_UPLOAD_DATA_SUCCESS,FETCH_UPLOAD_SOFTWARE_SUCCESS,NOT_UPLOAD}from\"../../../constants/actionTypes\";import Service from\"../../../lib/Service\";import{openNotification}from\"../../../utils/commonFunction\";function uploadData(args){var _args$args,type,userId,file,formData,res;return _regeneratorRuntime.wrap(function uploadData$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_args$args=args.args,type=_args$args.type,userId=_args$args.userId,file=_args$args.file;formData=new FormData();formData.append(\"type\",type);formData.append(\"userId\",userId);formData.append(\"file\",file);_context.next=8;return call(Service.post,\"resource/upload\",formData);case 8:res=_context.sent;_context.t0=res.data.error_code;_context.next=_context.t0===0?12:_context.t0===-1?24:_context.t0===1?28:_context.t0===2?32:36;break;case 12:_context.t1=type;_context.next=_context.t1===\"material\"?15:_context.t1===\"software\"?18:21;break;case 15:_context.next=17;return put({type:FETCH_UPLOAD_DATA_SUCCESS});case 17:return _context.abrupt(\"break\",22);case 18:_context.next=20;return put({type:FETCH_UPLOAD_SOFTWARE_SUCCESS});case 20:return _context.abrupt(\"break\",22);case 21:return _context.abrupt(\"return\",0);case 22:openNotification(res.data.message);return _context.abrupt(\"break\",37);case 24:_context.next=26;return put({type:NOT_UPLOAD});case 26:openNotification(res.data.message);return _context.abrupt(\"break\",37);case 28:_context.next=30;return put({type:NOT_UPLOAD});case 30:openNotification(res.data.message);return _context.abrupt(\"break\",37);case 32:_context.next=34;return put({type:NOT_UPLOAD});case 34:openNotification(res.data.message);return _context.abrupt(\"break\",37);case 36:openNotification(\"上传失败\");case 37:console.log(res.data);_context.next=43;break;case 40:_context.prev=40;_context.t2=_context[\"catch\"](0);console.log(_context.t2);case 43:case\"end\":return _context.stop();}}},_marked,null,[[0,40]]);}export default function rootResourceSagas(){return _regeneratorRuntime.wrap(function rootResourceSagas$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(FETCH_UPLOAD_RES,uploadData);case 2:case\"end\":return _context2.stop();}}},_marked2);}","map":{"version":3,"sources":["C:/projects/lab/lab_2.0/src/redux/sagas/resourceSagas/upload.js"],"names":["uploadData","rootResourceSagas","takeEvery","call","put","FETCH_UPLOAD_RES","FETCH_UPLOAD_DATA_SUCCESS","FETCH_UPLOAD_SOFTWARE_SUCCESS","NOT_UPLOAD","Service","openNotification","args","type","userId","file","formData","FormData","append","post","res","data","error_code","message","console","log"],"mappings":"+LAUUA,U,iDAqDeC,iB,EA/DzB,OAASC,SAAT,CAAoBC,IAApB,CAA0BC,GAA1B,KAAoC,oBAApC,CACA,OACIC,gBADJ,CAEIC,yBAFJ,CAGIC,6BAHJ,CAIIC,UAJJ,KAKO,gCALP,CAMA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,OAASC,gBAAT,KAAiC,+BAAjC,CAEA,QAAUV,CAAAA,UAAV,CAAqBW,IAArB,6LAEqCA,IAAI,CAACA,IAF1C,CAEeC,IAFf,YAEeA,IAFf,CAEqBC,MAFrB,YAEqBA,MAFrB,CAE6BC,IAF7B,YAE6BA,IAF7B,CAGcC,QAHd,CAGyB,GAAIC,CAAAA,QAAJ,EAHzB,CAIQD,QAAQ,CAACE,MAAT,CAAgB,MAAhB,CAAuBL,IAAvB,EACAG,QAAQ,CAACE,MAAT,CAAgB,QAAhB,CAA0BJ,MAA1B,EACAE,QAAQ,CAACE,MAAT,CAAgB,MAAhB,CAAwBH,IAAxB,EANR,gBAOoB,MAAMX,CAAAA,IAAI,CAACM,OAAO,CAACS,IAAT,CAAe,iBAAf,CAAkCH,QAAlC,CAAV,CAPpB,OAOcI,GAPd,2BAQgBA,GAAG,CAACC,IAAJ,CAASC,UARzB,6BASiB,CATjB,kBA0BiB,CAAC,CA1BlB,kBAgCiB,CAhCjB,kBAsCiB,CAtCjB,iCAUwBT,IAVxB,6BAWyB,UAXzB,kBAgByB,UAhBzB,sCAYwB,MAAMR,CAAAA,GAAG,CAAC,CACNQ,IAAI,CAAEN,yBADA,CAAD,CAAT,CAZxB,oEAiBwB,MAAMF,CAAAA,GAAG,CAAC,CACNQ,IAAI,CAAEL,6BADA,CAAD,CAAT,CAjBxB,mFAsB+B,CAtB/B,UAwBgBG,gBAAgB,CAACS,GAAG,CAACC,IAAJ,CAASE,OAAV,CAAhB,CAxBhB,4DA2BgB,MAAMlB,CAAAA,GAAG,CAAC,CACNQ,IAAI,CAAEJ,UADA,CAAD,CAAT,CA3BhB,QA8BgBE,gBAAgB,CAACS,GAAG,CAACC,IAAJ,CAASE,OAAV,CAAhB,CA9BhB,4DAiCgB,MAAMlB,CAAAA,GAAG,CAAC,CACNQ,IAAI,CAAEJ,UADA,CAAD,CAAT,CAjChB,QAoCgBE,gBAAgB,CAACS,GAAG,CAACC,IAAJ,CAASE,OAAV,CAAhB,CApChB,4DAuCgB,MAAMlB,CAAAA,GAAG,CAAC,CACNQ,IAAI,CAAEJ,UADA,CAAD,CAAT,CAvChB,QA0CgBE,gBAAgB,CAACS,GAAG,CAACC,IAAJ,CAASE,OAAV,CAAhB,CA1ChB,2CA6CgBZ,gBAAgB,CAAC,MAAD,CAAhB,CA7ChB,QA+CQa,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACC,IAAhB,EA/CR,iFAiDQG,OAAO,CAACC,GAAR,cAjDR,qEAqDA,cAAe,SAAUvB,CAAAA,iBAAV,iJACX,MAAMC,CAAAA,SAAS,CAACG,gBAAD,CAAmBL,UAAnB,CAAf,CADW","sourcesContent":["import { takeEvery, call, put} from \"redux-saga/effects\";\r\nimport {\r\n    FETCH_UPLOAD_RES,\r\n    FETCH_UPLOAD_DATA_SUCCESS,\r\n    FETCH_UPLOAD_SOFTWARE_SUCCESS,\r\n    NOT_UPLOAD\r\n} from \"../../../constants/actionTypes\";\r\nimport Service from \"../../../lib/Service\";\r\nimport { openNotification } from \"../../../utils/commonFunction\";\r\n\r\nfunction *uploadData(args) {\r\n    try{\r\n        const {type, userId, file} = args.args;\r\n        const formData = new FormData();\r\n        formData.append(\"type\",type);\r\n        formData.append(\"userId\", userId);\r\n        formData.append(\"file\", file);\r\n        const res = yield call(Service.post, \"resource/upload\", formData);\r\n        switch (res.data.error_code) {\r\n            case 0:\r\n                switch (type) {\r\n                    case \"material\":\r\n                        yield put({\r\n                            type: FETCH_UPLOAD_DATA_SUCCESS,\r\n                        });\r\n                        break;\r\n                    case \"software\":\r\n                        yield put({\r\n                            type: FETCH_UPLOAD_SOFTWARE_SUCCESS,\r\n                        });\r\n                        break;\r\n                    default:\r\n                        return 0\r\n                }\r\n                openNotification(res.data.message);\r\n                break;\r\n            case -1:\r\n                yield put({\r\n                    type: NOT_UPLOAD\r\n                });\r\n                openNotification(res.data.message);\r\n                break;\r\n            case 1:\r\n                yield put({\r\n                    type: NOT_UPLOAD\r\n                });\r\n                openNotification(res.data.message);\r\n                break;\r\n            case 2:\r\n                yield put({\r\n                    type: NOT_UPLOAD\r\n                });\r\n                openNotification(res.data.message);\r\n                break;\r\n            default:\r\n                openNotification(\"上传失败\");\r\n        }\r\n        console.log(res.data);\r\n    }catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport default function *rootResourceSagas() {\r\n    yield takeEvery(FETCH_UPLOAD_RES, uploadData);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}