{"ast":null,"code":"import _defineProperty from \"C:\\\\projects\\\\lab\\\\lab_2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar _axios$create;\n\nimport axios from \"axios\";\nimport qs from \"qs\";\n\nvar showStatus = function showStatus(status) {\n  var msg = {\n    400: '请求错误(400)',\n    401: '未授权,请重新登录(401)',\n    403: '拒绝访问(403)',\n    404: '请求出错(404)',\n    408: '请求超时(408)',\n    500: '服务器错误(500)',\n    501: '服务未实现(501)',\n    502: '网络错误(502)',\n    503: '服务不可用(503)',\n    504: '网络超时(504)',\n    505: 'HTTP版本不受支持(505)'\n  };\n\n  if (status in msg) {\n    return \"\".concat(msg[status], \",\\u8BF7\\u68C0\\u67E5\\u7F51\\u7EDC\\u6216\\u8054\\u7CFB\\u7BA1\\u7406\\u5458\");\n  } else {\n    return \"\\u8FDE\\u63A5\\u51FA\\u9519(\".concat(status, \"),\\u8BF7\\u68C0\\u67E5\\u7F51\\u7EDC\\u6216\\u8054\\u7CFB\\u7BA1\\u7406\\u5458\");\n  }\n};\n\nvar Service = axios.create((_axios$create = {\n  //基本域名 生产环境 ？ “线上服务器域名” ： “本地开发测试域名”\n  baseURL: process.env.NODE_ENV === 'production' ? 'http://172.22.4.2:8080/' : 'http://172.22.4.2:8080/'\n}, _defineProperty(_axios$create, \"baseURL\", process.env.NODE_ENV === 'production' ? 'http://49.235.20.228:8080/' : 'http://49.235.20.228:8080/'), _defineProperty(_axios$create, \"headers\", {\n  get: {\n    'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n  },\n  post: {\n    'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8' // 'Content-Type': 'application/json'\n\n  }\n}), _defineProperty(_axios$create, \"timeout\", 30000), _defineProperty(_axios$create, \"transformRequest\", [function (data) {\n  // data = JSON.stringify(data);\n  if (Object.prototype.toString.call(data) !== '[object FormData]') data = qs.stringify(data); // data = JSON.stringify(data)\n  // console.log(data.prototype);\n\n  return data;\n}]), _defineProperty(_axios$create, \"validateStatus\", function validateStatus() {\n  // 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常\n  return true;\n}), _defineProperty(_axios$create, \"transformResponse\", [function (data) {\n  if (typeof data === 'string' && data.startsWith('{')) {\n    data = JSON.parse(data);\n  }\n\n  return data;\n}]), _axios$create)); //请求拦截器\n\nService.interceptors.request.use(function (config) {\n  var isServer = typeof window === 'undefined';\n\n  if (!isServer) {\n    var token = window.localStorage.getItem('access');\n\n    if (token) {\n      config.headers.common['token'] = token;\n    }\n  }\n\n  return config;\n}, function (error) {\n  error.data = {};\n  error.data.msg = '服务器异常请联系管理员!';\n  return Promise.resolve(error);\n}); //响应拦截器\n\nService.interceptors.response.use(function (response) {\n  var status = response.status;\n  var message = '';\n\n  if (status < 200 || status >= 300) {\n    message = showStatus(status);\n\n    if (typeof response.data === 'string') {\n      response.data = {\n        message: message\n      };\n    } else {\n      response.data.message = message;\n    }\n  }\n\n  return response;\n}, function (error) {\n  error.data = {};\n  error.data.msg = '请求超时或服务器异常,请检查网络或联系管理员!';\n  return Promise.resolve(error);\n});\nexport default Service;","map":{"version":3,"sources":["C:/projects/lab/lab_2.0/src/lib/Service.js"],"names":["axios","qs","showStatus","status","msg","Service","create","baseURL","process","env","NODE_ENV","get","post","data","Object","prototype","toString","call","stringify","startsWith","JSON","parse","interceptors","request","use","config","isServer","window","token","localStorage","getItem","headers","common","error","Promise","resolve","response","message"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport qs from \"qs\";\r\n\r\nconst showStatus = (status) => {\r\n    const msg = {\r\n        400: '请求错误(400)',\r\n        401: '未授权,请重新登录(401)',\r\n        403: '拒绝访问(403)',\r\n        404: '请求出错(404)',\r\n        408: '请求超时(408)',\r\n        500: '服务器错误(500)',\r\n        501: '服务未实现(501)',\r\n        502: '网络错误(502)',\r\n        503: '服务不可用(503)',\r\n        504: '网络超时(504)',\r\n        505: 'HTTP版本不受支持(505)'\r\n    };\r\n    if (status in msg) {\r\n        return `${msg[status]},请检查网络或联系管理员`\r\n    } else {\r\n        return `连接出错(${status}),请检查网络或联系管理员`\r\n    }\r\n};\r\n\r\nconst Service = axios.create({\r\n    //基本域名 生产环境 ？ “线上服务器域名” ： “本地开发测试域名”\r\n    baseURL: process.env.NODE_ENV === 'production' ? 'http://172.22.4.2:8080/':'http://172.22.4.2:8080/',\r\n    baseURL: process.env.NODE_ENV === 'production' ? 'http://49.235.20.228:8080/':'http://49.235.20.228:8080/',\r\n    //baseURL: 'http://localhost:8080/',\r\n        headers: {\r\n            get: {\r\n                'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n            },\r\n            post: {\r\n                'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n                // 'Content-Type': 'application/json'\r\n            }\r\n        },\r\n    timeout: 30000,\r\n    transformRequest: [ data => {\r\n        // data = JSON.stringify(data);\r\n        if(Object.prototype.toString.call(data) !== '[object FormData]') data = qs.stringify(data);\r\n        // data = JSON.stringify(data)\r\n        // console.log(data.prototype);\r\n        return data\r\n    }],\r\n    validateStatus () {\r\n        // 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常\r\n        return true\r\n    },\r\n    transformResponse: [(data) => {\r\n        if (typeof data === 'string' && data.startsWith('{')) {\r\n            data = JSON.parse(data)\r\n        }\r\n        return data\r\n    }]\r\n});\r\n//请求拦截器\r\nService.interceptors.request.use(config => {\r\n    const isServer = typeof window === 'undefined';\r\n    if (!isServer) {\r\n        const token = window.localStorage.getItem('access');\r\n        if (token) {\r\n            config.headers.common['token'] = token;\r\n        }\r\n    }\r\n    return config\r\n},error => {\r\n    error.data = {};\r\n    error.data.msg = '服务器异常请联系管理员!';\r\n    return Promise.resolve(error);\r\n});\r\n//响应拦截器\r\nService.interceptors.response.use(response => {\r\n    const status = response.status;\r\n    let message = '';\r\n    if (status < 200 || status >= 300) {\r\n        message = showStatus(status);\r\n        if (typeof response.data === 'string') {\r\n            response.data = { message };\r\n        } else {\r\n            response.data.message = message;\r\n        }\r\n    }\r\n    return response;\r\n},error => {\r\n    error.data = {};\r\n    error.data.msg = '请求超时或服务器异常,请检查网络或联系管理员!';\r\n    return Promise.resolve(error)\r\n});\r\n\r\nexport default Service;\r\n"]},"metadata":{},"sourceType":"module"}