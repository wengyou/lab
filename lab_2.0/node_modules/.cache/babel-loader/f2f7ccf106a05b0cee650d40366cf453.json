{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\projects\\\\lab\\\\lab_2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(queryMyCourseRes),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootMyCourse);\n\nimport { takeEvery, call, put } from \"redux-saga/effects\";\nimport { QUERY_MY_COURSE, QUERY_MY_COURSE_SUCCESS } from \"../../../constants/actionTypes\";\nimport Service from \"../../../lib/Service\"; //老师和学生的我的任务界面\n\nfunction queryMyCourseRes(data) {\n  var _data$args, userId, type, url, res;\n\n  return _regeneratorRuntime.wrap(function queryMyCourseRes$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _data$args = data.args, userId = _data$args.userId, type = _data$args.type;\n          url = \"course/queryMyCourse?userId=\".concat(userId, \"&type=\").concat(type);\n          _context.next = 5;\n          return call(Service.get, url);\n\n        case 5:\n          res = _context.sent;\n          _context.t0 = res.data.error_code;\n          _context.next = _context.t0 === 0 ? 9 : 12;\n          break;\n\n        case 9:\n          _context.next = 11;\n          return put({\n            type: QUERY_MY_COURSE_SUCCESS,\n            payload: res.data.data\n          });\n\n        case 11:\n          return _context.abrupt(\"break\", 13);\n\n        case 12:\n          return _context.abrupt(\"return\", 0);\n\n        case 13:\n          _context.next = 17;\n          break;\n\n        case 15:\n          _context.prev = 15;\n          _context.t1 = _context[\"catch\"](0);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 15]]);\n}\n\nexport default function rootMyCourse() {\n  return _regeneratorRuntime.wrap(function rootMyCourse$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(QUERY_MY_COURSE, queryMyCourseRes);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/projects/lab/lab_2.0/src/redux/sagas/courseSagas/myCourse.js"],"names":["queryMyCourseRes","rootMyCourse","takeEvery","call","put","QUERY_MY_COURSE","QUERY_MY_COURSE_SUCCESS","Service","data","args","userId","type","url","get","res","error_code","payload"],"mappings":";;oDAQUA,gB;qDAmBeC,Y;;AA3BzB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SACIC,eADJ,EAEIC,uBAFJ,QAGO,gCAHP;AAIA,OAAOC,OAAP,MAAoB,sBAApB,C,CAEA;;AACA,SAAUP,gBAAV,CAA2BQ,IAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE+BA,IAAI,CAACC,IAFpC,EAEcC,MAFd,cAEcA,MAFd,EAEsBC,IAFtB,cAEsBA,IAFtB;AAGYC,UAAAA,GAHZ,yCAGiDF,MAHjD,mBAGgEC,IAHhE;AAAA;AAIoB,iBAAMR,IAAI,CAACI,OAAO,CAACM,GAAT,EAAcD,GAAd,CAAV;;AAJpB;AAIcE,UAAAA,GAJd;AAAA,wBAKeA,GAAG,CAACN,IAAJ,CAASO,UALxB;AAAA,0CAMiB,CANjB;AAAA;;AAAA;AAAA;AAOY,iBAAMX,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEL,uBADA;AAENU,YAAAA,OAAO,EAAEF,GAAG,CAACN,IAAJ,CAASA;AAFZ,WAAD,CAAT;;AAPZ;AAAA;;AAAA;AAAA,2CAauB,CAbvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,eAAe,SAAUP,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,SAAS,CAACG,eAAD,EAAkBL,gBAAlB,CAAf;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, call, put } from \"redux-saga/effects\";\r\nimport {\r\n    QUERY_MY_COURSE,\r\n    QUERY_MY_COURSE_SUCCESS\r\n} from \"../../../constants/actionTypes\";\r\nimport Service from \"../../../lib/Service\";\r\n\r\n//老师和学生的我的任务界面\r\nfunction* queryMyCourseRes(data) {\r\n    try{\r\n        let { userId, type } = data.args;\r\n        let url = `course/queryMyCourse?userId=${userId}&type=${type}`;\r\n        const res = yield call(Service.get, url);\r\n        switch(res.data.error_code){\r\n            case 0:\r\n            yield put({\r\n                type: QUERY_MY_COURSE_SUCCESS,\r\n                payload: res.data.data,\r\n            });\r\n                break;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n    catch (e) {\r\n    }\r\n}\r\nexport default function* rootMyCourse() {\r\n    yield takeEvery(QUERY_MY_COURSE, queryMyCourseRes)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}