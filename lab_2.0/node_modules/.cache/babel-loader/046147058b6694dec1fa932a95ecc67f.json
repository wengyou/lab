{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\projects\\\\lab\\\\lab_2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(queryAnnounceRes),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootAnnounceSagas);\n\nimport { takeEvery, put, call } from \"redux-saga/effects\";\nimport { QUERY_ANNOUNCE, QUERY_ANNOUNCE_SUCCESS } from \"../../../constants/actionTypes\";\nimport Service from \"../../../lib/Service\";\n\nfunction queryAnnounceRes(data) {\n  var _data$page, page, rows, url, res;\n\n  return _regeneratorRuntime.wrap(function queryAnnounceRes$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _data$page = data.page, page = _data$page.page, rows = _data$page.rows;\n          url = \"queryAnnounce?page=\".concat(page, \"&rows=\").concat(rows);\n          _context.next = 5;\n          return call(Service.get, url);\n\n        case 5:\n          res = _context.sent;\n          _context.t0 = res.data.error_code;\n          _context.next = _context.t0 === 0 ? 9 : 12;\n          break;\n\n        case 9:\n          _context.next = 11;\n          return put({\n            type: QUERY_ANNOUNCE_SUCCESS,\n            payload: res.data.data\n          });\n\n        case 11:\n          return _context.abrupt(\"break\", 13);\n\n        case 12:\n          return _context.abrupt(\"return\", 0);\n\n        case 13:\n          _context.next = 17;\n          break;\n\n        case 15:\n          _context.prev = 15;\n          _context.t1 = _context[\"catch\"](0);\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 15]]);\n}\n\nexport default function rootAnnounceSagas() {\n  return _regeneratorRuntime.wrap(function rootAnnounceSagas$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(QUERY_ANNOUNCE, queryAnnounceRes);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/projects/lab/lab_2.0/src/redux/sagas/announceSagas/announceSaga.js"],"names":["queryAnnounceRes","rootAnnounceSagas","takeEvery","put","call","QUERY_ANNOUNCE","QUERY_ANNOUNCE_SUCCESS","Service","data","page","rows","url","get","res","error_code","type","payload"],"mappings":";;oDAIUA,gB;qDAoBeC,iB;;AAxBzB,SAAQC,SAAR,EAAmBC,GAAnB,EAAwBC,IAAxB,QAAmC,oBAAnC;AACA,SAASC,cAAT,EAAyBC,sBAAzB,QAAuD,gCAAvD;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AAEA,SAAUP,gBAAV,CAA2BQ,IAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE6BA,IAAI,CAACC,IAFlC,EAEeA,IAFf,cAEeA,IAFf,EAEqBC,IAFrB,cAEqBA,IAFrB;AAGYC,UAAAA,GAHZ,gCAGwCF,IAHxC,mBAGqDC,IAHrD;AAAA;AAIoB,iBAAMN,IAAI,CAACG,OAAO,CAACK,GAAT,EAAcD,GAAd,CAAV;;AAJpB;AAIcE,UAAAA,GAJd;AAAA,wBAKgBA,GAAG,CAACL,IAAJ,CAASM,UALzB;AAAA,0CAMiB,CANjB;AAAA;;AAAA;AAAA;AAOgB,iBAAMX,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAET,sBADA;AAENU,YAAAA,OAAO,EAAEH,GAAG,CAACL,IAAJ,CAASA;AAFZ,WAAD,CAAT;;AAPhB;AAAA;;AAAA;AAAA,2CAauB,CAbvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,eAAe,SAAUP,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,SAAS,CAACG,cAAD,EAAiBL,gBAAjB,CAAf;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {takeEvery, put, call} from \"redux-saga/effects\";\r\nimport { QUERY_ANNOUNCE, QUERY_ANNOUNCE_SUCCESS } from \"../../../constants/actionTypes\";\r\nimport Service from \"../../../lib/Service\";\r\n\r\nfunction* queryAnnounceRes(data) {\r\n    try {\r\n        const {page, rows} = data.page;\r\n        let url = `queryAnnounce?page=${page}&rows=${rows}`;\r\n        const res = yield call(Service.get, url);\r\n        switch (res.data.error_code) {\r\n            case 0:\r\n                yield put({\r\n                    type: QUERY_ANNOUNCE_SUCCESS,\r\n                    payload: res.data.data\r\n                });\r\n                break;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n    catch (e) {\r\n\r\n    }\r\n}\r\nexport default function* rootAnnounceSagas() {\r\n    yield takeEvery(QUERY_ANNOUNCE, queryAnnounceRes)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}