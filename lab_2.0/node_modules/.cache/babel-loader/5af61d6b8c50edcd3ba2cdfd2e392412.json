{"ast":null,"code":"import { fromJS } from \"immutable\";\nimport { default as constants, COUNTER_SUCCESS, LOG_OUT, LOGIN_SUCCESS, PRESERVE_SUCCESS, REGISTER_SUCCESS, REGISTERED_SUCCESS, FETCH_QUERY_REGISTER_SUCCESS, FETCH_PARAM_SUCCESS, SECRET_GUARD_EXISTENCE_SUCCESS, RESET_PASSWARD, ADD_QUESTION_SUCCESS, CHECK_QUESTION_SUCCESS, SEND_FORGET_FLAG_SUCCESS } from \"../../../constants/actionTypes\";\nvar defaultSate = fromJS({\n  login: false,\n  userIdentify: \"游客\",\n  name: \"\",\n  userId: \"\",\n  academy: \"\",\n  class: \"\",\n  discipline: \"\",\n  grade: \"\",\n  sex: \"\",\n  type: \"\",\n  phone: \"\",\n  password: \"\",\n  bigOpenKey: sessionStorage.getItem(\"bigOpenKey\"),\n  smallOpenKey: sessionStorage.getItem(\"smallOpenKey\"),\n  time: Date.now(),\n  registerSuccess: false,\n  counter: '',\n  registeredFlag: \"\",\n  registerTotal: \"\",\n  registerStudent: [],\n  pv: '',\n  uv: '',\n  param: [],\n  isQuestion: '',\n  resetPasswardData: {},\n  isCheck: false,\n  modifyPassward: '',\n  visible: '',\n  gorgetFlag: ''\n});\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSate;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_OUT:\n      return state.merge({\n        login: false,\n        userIdentify: \"游客\",\n        userId: \"\",\n        academy: \"\",\n        class: \"\",\n        discipline: \"\",\n        grade: \"\",\n        sex: \"\",\n        type: \"\",\n        phone: \"\",\n        bigOpenKey: sessionStorage.setItem(\"bigOpenKey\", \"1\"),\n        time: Date.now()\n      });\n\n    case LOGIN_SUCCESS:\n      return state.merge({\n        login: true,\n        userIdentify: action.payload.id,\n        name: action.payload.name,\n        userId: action.payload.userId,\n        academy: action.payload.academy,\n        class: action.payload.cls,\n        discipline: action.payload.discipline,\n        grade: action.payload.grade,\n        sex: action.payload.sex,\n        type: action.payload.type,\n        phone: action.payload.phone,\n        password: action.payload.password,\n        bigOpenKey: sessionStorage.setItem(\"bigOpenKey\", \"1\"),\n        time: Date.now()\n      });\n\n    case RESET_PASSWARD:\n      return state.merge({\n        resetPasswardData: action.payload,\n        modifyPassward: true,\n        isQuestion: false,\n        add: add\n      });\n\n    case SECRET_GUARD_EXISTENCE_SUCCESS:\n      return state.merge({\n        isQuestion: action.payload,\n        modifyPassward: new Date()\n      });\n\n    case SEND_FORGET_FLAG_SUCCESS:\n      return state.merge({\n        forgetFlag: new Date()\n      });\n\n    case ADD_QUESTION_SUCCESS:\n      return state.merge({\n        isQuestion: true\n      });\n\n    case CHECK_QUESTION_SUCCESS:\n      return state.merge({\n        isCheck: true,\n        visible: new Date(),\n        login: true,\n        userIdentify: action.payload.type == 'student' && '学生' || action.payload.type == 'teacher' && '教师' || action.payload.type == 'admin' && '超级管理员',\n        name: action.payload.userName,\n        userId: action.payload.userId,\n        academy: action.payload.academy,\n        class: action.payload.cls,\n        discipline: action.payload.discipline,\n        grade: action.payload.grade,\n        sex: action.payload.sex,\n        type: action.payload.type,\n        phone: action.payload.phone,\n        password: action.payload.password,\n        bigOpenKey: sessionStorage.setItem(\"bigOpenKey\", \"1\")\n      });\n\n    case REGISTER_SUCCESS:\n      return state.merge({\n        registerSuccess: true\n      });\n\n    case PRESERVE_SUCCESS:\n      return state.merge({\n        login: true,\n        name: action.payload.userName,\n        userId: action.payload.userId,\n        academy: action.payload.academy,\n        class: action.payload.class,\n        discipline: action.payload.discipline,\n        grade: action.payload.grade,\n        sex: action.payload.sex,\n        type: action.payload.type,\n        phone: action.payload.phone,\n        password: action.payload.password,\n        visible: new Date()\n      });\n\n    case COUNTER_SUCCESS:\n      return state.merge({\n        counter: action.payload\n      });\n\n    case FETCH_PARAM_SUCCESS:\n      return state.merge({\n        pv: action.payload[6].keyValue,\n        uv: action.payload[7].keyValue,\n        param: action.payload\n      });\n    //老师查询待批准学生\n\n    case FETCH_QUERY_REGISTER_SUCCESS:\n      return state.merge({\n        registerTotal: action.payload.total,\n        registerStudent: action.payload.items\n      });\n    //老师批准学生\n    // case constants.REGISTERED_SUCCESS:\n    //     return state.merge({\n    //         registerTotal: action.payload.total,\n    //         registerStudent: action.payload.items,\n    //     });\n\n    case REGISTERED_SUCCESS:\n      return state.set(\"registeredFlag\", new Date());\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/projects/lab/lab_2.0/src/redux/reducers/userMana/common.js"],"names":["fromJS","default","constants","COUNTER_SUCCESS","LOG_OUT","LOGIN_SUCCESS","PRESERVE_SUCCESS","REGISTER_SUCCESS","REGISTERED_SUCCESS","FETCH_QUERY_REGISTER_SUCCESS","FETCH_PARAM_SUCCESS","SECRET_GUARD_EXISTENCE_SUCCESS","RESET_PASSWARD","ADD_QUESTION_SUCCESS","CHECK_QUESTION_SUCCESS","SEND_FORGET_FLAG_SUCCESS","defaultSate","login","userIdentify","name","userId","academy","class","discipline","grade","sex","type","phone","password","bigOpenKey","sessionStorage","getItem","smallOpenKey","time","Date","now","registerSuccess","counter","registeredFlag","registerTotal","registerStudent","pv","uv","param","isQuestion","resetPasswardData","isCheck","modifyPassward","visible","gorgetFlag","state","action","merge","setItem","payload","id","cls","add","forgetFlag","userName","keyValue","total","items","set"],"mappings":"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","sourcesContent":["import { fromJS } from \"immutable\";\r\nimport {\r\n    default as constants,\r\n    COUNTER_SUCCESS,\r\n    LOG_OUT,\r\n    LOGIN_SUCCESS,\r\n    PRESERVE_SUCCESS,\r\n    REGISTER_SUCCESS,\r\n    REGISTERED_SUCCESS,\r\n    FETCH_QUERY_REGISTER_SUCCESS,\r\n    FETCH_PARAM_SUCCESS,\r\n    SECRET_GUARD_EXISTENCE_SUCCESS,\r\n    RESET_PASSWARD,\r\n    ADD_QUESTION_SUCCESS,\r\n    CHECK_QUESTION_SUCCESS,\r\n    SEND_FORGET_FLAG_SUCCESS\r\n} from \"../../../constants/actionTypes\";\r\n\r\nconst defaultSate = fromJS({\r\n    login: false,\r\n    userIdentify: \"游客\",\r\n    name: \"\",\r\n    userId: \"\",\r\n    academy:\"\",\r\n    class: \"\",\r\n    discipline: \"\",\r\n    grade:\"\",\r\n    sex: \"\",\r\n    type: \"\",\r\n    phone: \"\",\r\n    password: \"\",\r\n    bigOpenKey: sessionStorage.getItem(\"bigOpenKey\"),\r\n    smallOpenKey: sessionStorage.getItem(\"smallOpenKey\"),\r\n    time: Date.now(),\r\n    registerSuccess: false,\r\n    counter: '',\r\n    registeredFlag: \"\",\r\n    registerTotal: \"\",\r\n    registerStudent: [],\r\n    pv: '',\r\n    uv: '',\r\n    param: [],\r\n    isQuestion: '',\r\n    resetPasswardData: {},\r\n    isCheck: false,\r\n    modifyPassward: '',\r\n    visible: '',\r\n    gorgetFlag: ''\r\n});\r\n\r\nexport default (state = defaultSate, action) => {\r\n    switch (action.type) {\r\n        case LOG_OUT:\r\n            return state.merge({\r\n                login: false,\r\n                userIdentify: \"游客\",\r\n                userId: \"\",\r\n                academy:\"\",\r\n                class: \"\",\r\n                discipline: \"\",\r\n                grade:\"\",\r\n                sex: \"\",\r\n                type: \"\",\r\n                phone: \"\",\r\n                bigOpenKey: sessionStorage.setItem(\"bigOpenKey\", \"1\"),\r\n                time: Date.now()\r\n            });\r\n        case LOGIN_SUCCESS:\r\n            return state.merge({\r\n                login: true,\r\n                userIdentify:action.payload.id,\r\n                name: action.payload.name,\r\n                userId: action.payload.userId,\r\n                academy: action.payload.academy,\r\n                class: action.payload.cls,\r\n                discipline: action.payload.discipline,\r\n                grade: action.payload.grade,\r\n                sex: action.payload.sex,\r\n                type: action.payload.type,\r\n                phone: action.payload.phone,\r\n                password: action.payload.password,\r\n                bigOpenKey: sessionStorage.setItem(\"bigOpenKey\", \"1\"),\r\n                time: Date.now(),\r\n            });\r\n        case RESET_PASSWARD:\r\n            return state.merge({\r\n                resetPasswardData: action.payload,\r\n                modifyPassward: true,\r\n                isQuestion: false,\r\n                add\r\n            })\r\n        case SECRET_GUARD_EXISTENCE_SUCCESS:\r\n            return state.merge({\r\n                isQuestion: action.payload,\r\n                modifyPassward: new Date()\r\n            })\r\n        case SEND_FORGET_FLAG_SUCCESS:\r\n            return state.merge({\r\n                forgetFlag: new Date()\r\n            })\r\n        case ADD_QUESTION_SUCCESS:\r\n            return state.merge({\r\n                isQuestion: true\r\n            })\r\n        case CHECK_QUESTION_SUCCESS: \r\n            return state.merge({\r\n                isCheck: true,\r\n                visible: new Date(),\r\n                login: true,\r\n                userIdentify: (action.payload.type == 'student' && '学生') || (action.payload.type == 'teacher' && '教师') || (action.payload.type == 'admin' && '超级管理员'),\r\n                name: action.payload.userName,\r\n                userId: action.payload.userId,\r\n                academy: action.payload.academy,\r\n                class: action.payload.cls,\r\n                discipline: action.payload.discipline,\r\n                grade: action.payload.grade,\r\n                sex: action.payload.sex,\r\n                type: action.payload.type,\r\n                phone: action.payload.phone,\r\n                password: action.payload.password,\r\n                bigOpenKey: sessionStorage.setItem(\"bigOpenKey\", \"1\"),\r\n            })\r\n        case REGISTER_SUCCESS:\r\n            return state.merge({\r\n                registerSuccess: true,\r\n            });\r\n        case PRESERVE_SUCCESS:\r\n            return state.merge({\r\n                login: true,\r\n                name: action.payload.userName,\r\n                userId: action.payload.userId,\r\n                academy: action.payload.academy,\r\n                class: action.payload.class,\r\n                discipline: action.payload.discipline,\r\n                grade: action.payload.grade,\r\n                sex: action.payload.sex,\r\n                type: action.payload.type,\r\n                phone: action.payload.phone,\r\n                password: action.payload.password,\r\n                visible: new Date()\r\n            });\r\n        case COUNTER_SUCCESS:\r\n            return state.merge({\r\n                counter: action.payload\r\n            });\r\n        case FETCH_PARAM_SUCCESS:\r\n            return state.merge({\r\n                pv: action.payload[6].keyValue,\r\n                uv: action.payload[7].keyValue,\r\n                param: action.payload\r\n            });\r\n        //老师查询待批准学生\r\n        case FETCH_QUERY_REGISTER_SUCCESS:\r\n            return state.merge({\r\n                registerTotal: action.payload.total,\r\n                registerStudent: action.payload.items,\r\n            });\r\n        //老师批准学生\r\n        // case constants.REGISTERED_SUCCESS:\r\n        //     return state.merge({\r\n        //         registerTotal: action.payload.total,\r\n        //         registerStudent: action.payload.items,\r\n        //     });\r\n        case REGISTERED_SUCCESS:\r\n            return state.set(\"registeredFlag\", new Date());\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}