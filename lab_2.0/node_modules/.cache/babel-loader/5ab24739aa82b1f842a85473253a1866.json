{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\projects\\\\lab\\\\lab_2.0\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(uploadData),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(rootResourceSagas);\n\nimport { takeEvery, call, put } from \"redux-saga/effects\";\nimport { FETCH_UPLOAD_RES, FETCH_UPLOAD_DATA_SUCCESS, FETCH_UPLOAD_SOFTWARE_SUCCESS, NOT_UPLOAD } from \"../../../constants/actionTypes\";\nimport Service from \"../../../lib/Service\";\nimport { openNotification } from \"../../../utils/commonFunction\";\n\nfunction uploadData(args) {\n  var _args$args, type, userId, file, formData, res;\n\n  return _regeneratorRuntime.wrap(function uploadData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _args$args = args.args, type = _args$args.type, userId = _args$args.userId, file = _args$args.file;\n          formData = new FormData();\n          formData.append(\"type\", type);\n          formData.append(\"userId\", userId);\n          formData.append(\"file\", file);\n          _context.next = 8;\n          return call(Service.post, \"resource/upload\", formData);\n\n        case 8:\n          res = _context.sent;\n          _context.t0 = res.data.error_code;\n          _context.next = _context.t0 === 0 ? 12 : _context.t0 === -1 ? 24 : _context.t0 === 1 ? 28 : _context.t0 === 2 ? 32 : 36;\n          break;\n\n        case 12:\n          _context.t1 = type;\n          _context.next = _context.t1 === \"material\" ? 15 : _context.t1 === \"software\" ? 18 : 21;\n          break;\n\n        case 15:\n          _context.next = 17;\n          return put({\n            type: FETCH_UPLOAD_DATA_SUCCESS\n          });\n\n        case 17:\n          return _context.abrupt(\"break\", 22);\n\n        case 18:\n          _context.next = 20;\n          return put({\n            type: FETCH_UPLOAD_SOFTWARE_SUCCESS\n          });\n\n        case 20:\n          return _context.abrupt(\"break\", 22);\n\n        case 21:\n          return _context.abrupt(\"return\", 0);\n\n        case 22:\n          openNotification(res.data.message);\n          return _context.abrupt(\"break\", 37);\n\n        case 24:\n          _context.next = 26;\n          return put({\n            type: NOT_UPLOAD\n          });\n\n        case 26:\n          openNotification(res.data.message);\n          return _context.abrupt(\"break\", 37);\n\n        case 28:\n          _context.next = 30;\n          return put({\n            type: NOT_UPLOAD\n          });\n\n        case 30:\n          openNotification(res.data.message);\n          return _context.abrupt(\"break\", 37);\n\n        case 32:\n          _context.next = 34;\n          return put({\n            type: NOT_UPLOAD\n          });\n\n        case 34:\n          openNotification(res.data.message);\n          return _context.abrupt(\"break\", 37);\n\n        case 36:\n          openNotification(\"上传失败\");\n\n        case 37:\n          console.log(res.data);\n          _context.next = 43;\n          break;\n\n        case 40:\n          _context.prev = 40;\n          _context.t2 = _context[\"catch\"](0);\n          console.log(_context.t2);\n\n        case 43:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 40]]);\n}\n\nexport default function rootResourceSagas() {\n  return _regeneratorRuntime.wrap(function rootResourceSagas$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(FETCH_UPLOAD_RES, uploadData);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/projects/lab/lab_2.0/src/redux/sagas/resourceSagas/upload.js"],"names":["uploadData","rootResourceSagas","takeEvery","call","put","FETCH_UPLOAD_RES","FETCH_UPLOAD_DATA_SUCCESS","FETCH_UPLOAD_SOFTWARE_SUCCESS","NOT_UPLOAD","Service","openNotification","args","type","userId","file","formData","FormData","append","post","res","data","error_code","message","console","log"],"mappings":";;oDAUUA,U;qDAqDeC,iB;;AA/DzB,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAoC,oBAApC;AACA,SACIC,gBADJ,EAEIC,yBAFJ,EAGIC,6BAHJ,EAIIC,UAJJ,QAKO,gCALP;AAMA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,gBAAT,QAAiC,+BAAjC;;AAEA,SAAUV,UAAV,CAAqBW,IAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEqCA,IAAI,CAACA,IAF1C,EAEeC,IAFf,cAEeA,IAFf,EAEqBC,MAFrB,cAEqBA,MAFrB,EAE6BC,IAF7B,cAE6BA,IAF7B;AAGcC,UAAAA,QAHd,GAGyB,IAAIC,QAAJ,EAHzB;AAIQD,UAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAuBL,IAAvB;AACAG,UAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0BJ,MAA1B;AACAE,UAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBH,IAAxB;AANR;AAOoB,iBAAMX,IAAI,CAACM,OAAO,CAACS,IAAT,EAAe,iBAAf,EAAkCH,QAAlC,CAAV;;AAPpB;AAOcI,UAAAA,GAPd;AAAA,wBAQgBA,GAAG,CAACC,IAAJ,CAASC,UARzB;AAAA,0CASiB,CATjB,wBA0BiB,CAAC,CA1BlB,wBAgCiB,CAhCjB,wBAsCiB,CAtCjB;AAAA;;AAAA;AAAA,wBAUwBT,IAVxB;AAAA,0CAWyB,UAXzB,wBAgByB,UAhBzB;AAAA;;AAAA;AAAA;AAYwB,iBAAMR,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEN;AADA,WAAD,CAAT;;AAZxB;AAAA;;AAAA;AAAA;AAiBwB,iBAAMF,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEL;AADA,WAAD,CAAT;;AAjBxB;AAAA;;AAAA;AAAA,2CAsB+B,CAtB/B;;AAAA;AAwBgBG,UAAAA,gBAAgB,CAACS,GAAG,CAACC,IAAJ,CAASE,OAAV,CAAhB;AAxBhB;;AAAA;AAAA;AA2BgB,iBAAMlB,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AA3BhB;AA8BgBE,UAAAA,gBAAgB,CAACS,GAAG,CAACC,IAAJ,CAASE,OAAV,CAAhB;AA9BhB;;AAAA;AAAA;AAiCgB,iBAAMlB,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AAjChB;AAoCgBE,UAAAA,gBAAgB,CAACS,GAAG,CAACC,IAAJ,CAASE,OAAV,CAAhB;AApChB;;AAAA;AAAA;AAuCgB,iBAAMlB,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AAvChB;AA0CgBE,UAAAA,gBAAgB,CAACS,GAAG,CAACC,IAAJ,CAASE,OAAV,CAAhB;AA1ChB;;AAAA;AA6CgBZ,UAAAA,gBAAgB,CAAC,MAAD,CAAhB;;AA7ChB;AA+CQa,UAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACC,IAAhB;AA/CR;AAAA;;AAAA;AAAA;AAAA;AAiDQG,UAAAA,OAAO,CAACC,GAAR;;AAjDR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqDA,eAAe,SAAUvB,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,SAAS,CAACG,gBAAD,EAAmBL,UAAnB,CAAf;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, call, put} from \"redux-saga/effects\";\r\nimport {\r\n    FETCH_UPLOAD_RES,\r\n    FETCH_UPLOAD_DATA_SUCCESS,\r\n    FETCH_UPLOAD_SOFTWARE_SUCCESS,\r\n    NOT_UPLOAD\r\n} from \"../../../constants/actionTypes\";\r\nimport Service from \"../../../lib/Service\";\r\nimport { openNotification } from \"../../../utils/commonFunction\";\r\n\r\nfunction *uploadData(args) {\r\n    try{\r\n        const {type, userId, file} = args.args;\r\n        const formData = new FormData();\r\n        formData.append(\"type\",type);\r\n        formData.append(\"userId\", userId);\r\n        formData.append(\"file\", file);\r\n        const res = yield call(Service.post, \"resource/upload\", formData);\r\n        switch (res.data.error_code) {\r\n            case 0:\r\n                switch (type) {\r\n                    case \"material\":\r\n                        yield put({\r\n                            type: FETCH_UPLOAD_DATA_SUCCESS,\r\n                        });\r\n                        break;\r\n                    case \"software\":\r\n                        yield put({\r\n                            type: FETCH_UPLOAD_SOFTWARE_SUCCESS,\r\n                        });\r\n                        break;\r\n                    default:\r\n                        return 0\r\n                }\r\n                openNotification(res.data.message);\r\n                break;\r\n            case -1:\r\n                yield put({\r\n                    type: NOT_UPLOAD\r\n                });\r\n                openNotification(res.data.message);\r\n                break;\r\n            case 1:\r\n                yield put({\r\n                    type: NOT_UPLOAD\r\n                });\r\n                openNotification(res.data.message);\r\n                break;\r\n            case 2:\r\n                yield put({\r\n                    type: NOT_UPLOAD\r\n                });\r\n                openNotification(res.data.message);\r\n                break;\r\n            default:\r\n                openNotification(\"上传失败\");\r\n        }\r\n        console.log(res.data);\r\n    }catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport default function *rootResourceSagas() {\r\n    yield takeEvery(FETCH_UPLOAD_RES, uploadData);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}