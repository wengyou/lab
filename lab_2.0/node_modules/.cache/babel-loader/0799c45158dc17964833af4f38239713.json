{"ast":null,"code":"import { fromJS } from \"immutable\";\nimport * as constants from \"../../constants/actionTypes\";\nvar defaultState = fromJS({\n  taskTotal: \" \",\n  courseTotal: \"\",\n  submitTotal: \"\",\n  downloadUrl: \"\",\n  courseTask: [],\n  taskResource: {},\n  myCourse: [],\n  allCourse: [],\n  unsubmitList: [],\n  submitList: [],\n  checkList: [],\n  studentCourseList: [],\n  teacherUploadFlag: false,\n  studentUploadFlag: false,\n  teacherUpdateFlag: false,\n  updateCourseFlag: false\n});\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //那个游客也可见的课程页面，并用于学生添加课程\n  switch (action.type) {\n    case constants.QUERY_COURSE_RES_SUCCESS:\n      return state.merge({\n        taskTotal: action.payload.total,\n        courseResource: action.payload.items\n      });\n\n    case constants.QUERY_COURSE_TASK_SUCCESS:\n      var obj = {};\n      obj[action.teacherCourseId] = action.payload;\n      var newObj = Object.assign(obj, action.courseTask);\n      return state.set(\"courseTask\", newObj);\n\n    case constants.QUERY_MY_COURSE_SUCCESS:\n      return state.set(\"myCourse\", action.payload);\n\n    case constants.TEACHER_QUERY_COURSE_SUCCESS:\n      return state.merge({\n        allCourse: action.payload.items,\n        courseTotal: action.payload.total\n      });\n\n    case constants.STUDENT_QUERY_SUBMIT_SUCCESS:\n      return state.set(\"checkList\", action.payload);\n\n    case constants.TEACHER_QUERY_UNSUBMIT_SUCCESS:\n      return state.set(\"unsubmitList\", action.payload);\n\n    case constants.TEACHER_QUERY_SUBMIT_SUCCESS:\n      return state.merge({\n        submitTotal: action.payload.total,\n        submitList: action.payload.items\n      });\n\n    case constants.TEACHER_DOWNLOAD_SUBMIT_SUCCESS:\n      return state.set(\"downloadUrl\", action.payload);\n    //修改store\n    //学生删除课程\n\n    case constants.STUDENT_DELETE_COURSE_SUCCESS:\n      var myCourseRes_S = state.toJS().myCourse;\n      var courseResourceRes_S = state.toJS().courseResource;\n      var myCourseArr_S = [];\n      myCourseRes_S.map(function (e) {\n        return myCourseArr_S.push(e.studentCourseId);\n      });\n      courseResourceRes_S.map(function (e) {\n        if (e.teacherCourseId === action.teacherCourseId) {\n          e.added = !e.added;\n        }\n      });\n      var myCourseIndex_S = myCourseArr_S.indexOf(action.studentCourseId);\n      myCourseRes_S.splice(myCourseIndex_S, 1);\n      return state.merge({\n        myCourse: myCourseRes_S,\n        courseResource: courseResourceRes_S\n      });\n    //学生删除作业\n\n    case constants.STUDENT_DELETE_HOMEWORK_SUCCESS:\n      var checkListRes = state.toJS().checkList;\n      var checkListSearch = action.payload;\n      var checkListArr = [];\n      checkListRes.map(function (e) {\n        return checkListArr.push(e.id);\n      });\n      var checkListIndex = checkListArr.indexOf(checkListSearch);\n      checkListRes.splice(checkListIndex, 1);\n      return state.set(\"checkList\", checkListRes);\n    //老师删除课程后\n\n    case constants.TEACHER_DELETE_COURSE_SUCCESS:\n      var myCourseRes_T = state.toJS().myCourse;\n      var allCourseRes_T = state.toJS().allCourse;\n      var myCourseArr_T = [];\n      myCourseRes_T.map(function (e) {\n        return myCourseArr_T.push(e.teacherCourseId);\n      });\n      allCourseRes_T.map(function (e) {\n        if (e.id === action.payload) {\n          e.added = !e.added;\n        }\n      });\n      var myCourseIndex_T = myCourseArr_T.indexOf(action.payload);\n      myCourseRes_T.splice(myCourseIndex_T, 1);\n      return state.merge({\n        myCourse: myCourseRes_T,\n        allCourse: allCourseRes_T\n      });\n    //老师删除任务后\n\n    case constants.TEACHER_DELETE_TASK_SUCCESS:\n      var teacherDeleteTask = state.toJS().courseTask;\n      var deleteIndex = 0;\n      teacherDeleteTask[action.teacherCourseId].map(function (item, index) {\n        if (item.id === action.taskId) {\n          deleteIndex = index;\n          return index;\n        }\n      });\n      teacherDeleteTask[action.teacherCourseId].splice(deleteIndex, 1);\n      return state.set(\"courseTask\", teacherDeleteTask);\n    //学生添加课程\n\n    case constants.STUDENT_ADD_COURSE_SUCCESS:\n      var courseResourceRes = state.toJS().courseResource;\n      var newCourseResource = courseResourceRes.map(function (e) {\n        if (e.teacherCourseId === action.payload) {\n          e.added = !e.added;\n        }\n\n        return e;\n      });\n      return state.set(\"courseResource\", newCourseResource);\n    //老师添加课程后：\n\n    case constants.TEACHER_ADD_COURSE_SUCCESS:\n      var allCourseRes = state.toJS().allCourse;\n      var updateCourseFlag1 = state.toJS().updateCourseFlag;\n      allCourseRes.map(function (e) {\n        if (e.id === action.payload) {\n          e.added = !e.added;\n        }\n      });\n      return state.merge({\n        allCourse: allCourseRes,\n        updateCourseFlag: !updateCourseFlag1\n      });\n    //remark改变后\n\n    case constants.TEACHER_ADD_REMARK_SUCCESS:\n      var myCourseRes = state.toJS().myCourse;\n      var updateCourseFlag2 = state.toJS().updateCourseFlag;\n      var teacherCourseId1 = action.payload.teacherCourseId;\n      var remark = action.payload.remark;\n      var myCourseList = myCourseRes.map(function (e) {\n        if (e.teacherCourseId === teacherCourseId1) e.remark = remark;\n        return e;\n      });\n      return state.merge({\n        myCourse: myCourseList,\n        updateCourseFlag: !updateCourseFlag2\n      });\n    //开启上传下载作业！\n\n    case constants.TEACHER_TOGGLE_TASK_UPLOAD_SUCCESS:\n      var toggleCourseTask = state.toJS().courseTask;\n      toggleCourseTask[action.teacherCourseId].map(function (e) {\n        if (e.id === action.taskId) {\n          e.closed = !e.closed;\n          return e;\n        }\n      });\n      return state.set(\"courseTask\", toggleCourseTask);\n    //老师发布任务后，任务动态显示在列表在\n\n    case constants.TEACHER_RELEASE_TASKS_SUCCESS:\n      var releaseTask = state.toJS().courseTask;\n      var teacherUploadFlag = state.toJS().teacherUploadFlag;\n      releaseTask[action.teacherCourseId] = action.payload;\n      return state.merge({\n        courseTask: releaseTask,\n        teacherUploadFlag: !teacherUploadFlag\n      });\n    //老师发布任务失败\n\n    case constants.TEACHER_RELEASE_TASKS_FAILED:\n      var teacherUploadFlag2 = state.toJS().teacherUploadFlag;\n      return state.set(\"teacherUploadFlag\", !teacherUploadFlag2);\n    //老师修改任务后，任务变化\n\n    case constants.TEACHER_UPDATE_TASK_SUCCESS:\n      var updateTask = state.toJS().courseTask;\n      var teacherUpdateFlag = state.toJS().teacherUpdateFlag;\n      updateTask[action.teacherCourseId] = action.payload;\n      return state.merge({\n        courseTask: updateTask,\n        teacherUpdateFlag: !teacherUpdateFlag\n      });\n    //老师修改任务失败\n\n    case constants.TEACHER_UPDATE_TASK_FAILED:\n      var teacherUpdateFlag2 = state.toJS().teacherUpdateFlag;\n      return state.set(\"teacherUpdateFlag\", !teacherUpdateFlag2);\n    //学生上传任务成功,学生上传任务失败\n\n    case constants.STUDENT_UPLOAD_HOMEWORK_SUCCESS:\n    case constants.STUDENT_UPLOAD_HOMEWORK_FAILED:\n      var studentUploadFlag = state.toJS().studentUploadFlag;\n      return state.set(\"studentUploadFlag\", !studentUploadFlag);\n    //搜索课程\n\n    case constants.FETCH_SEARCH_COURSE_SUCCESS:\n      return state.merge({\n        taskTotal: action.payload.total,\n        courseResource: action.payload.items\n      });\n\n    case constants.TEACHER_CHECK_STUDENT_SUCCESS:\n      return state.set(\"studentCourseList\", action.payload);\n\n    case constants.TEACHER_DELETE_STUDENT_SUCCESS:\n      var studentCourseList = state.toJS().studentCourseList;\n      var arr = [];\n      studentCourseList.map(function (e) {\n        if (e.studentCourseId !== action.payload) {\n          return arr.push(e);\n        }\n      });\n      return state.set(\"studentCourseList\", arr);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/projects/lab/lab_2.0/src/redux/reducers/course.js"],"names":["fromJS","constants","defaultState","taskTotal","courseTotal","submitTotal","downloadUrl","courseTask","taskResource","myCourse","allCourse","unsubmitList","submitList","checkList","studentCourseList","teacherUploadFlag","studentUploadFlag","teacherUpdateFlag","updateCourseFlag","state","action","type","QUERY_COURSE_RES_SUCCESS","merge","payload","total","courseResource","items","QUERY_COURSE_TASK_SUCCESS","obj","teacherCourseId","newObj","Object","assign","set","QUERY_MY_COURSE_SUCCESS","TEACHER_QUERY_COURSE_SUCCESS","STUDENT_QUERY_SUBMIT_SUCCESS","TEACHER_QUERY_UNSUBMIT_SUCCESS","TEACHER_QUERY_SUBMIT_SUCCESS","TEACHER_DOWNLOAD_SUBMIT_SUCCESS","STUDENT_DELETE_COURSE_SUCCESS","myCourseRes_S","toJS","courseResourceRes_S","myCourseArr_S","map","e","push","studentCourseId","added","myCourseIndex_S","indexOf","splice","STUDENT_DELETE_HOMEWORK_SUCCESS","checkListRes","checkListSearch","checkListArr","id","checkListIndex","TEACHER_DELETE_COURSE_SUCCESS","myCourseRes_T","allCourseRes_T","myCourseArr_T","myCourseIndex_T","TEACHER_DELETE_TASK_SUCCESS","teacherDeleteTask","deleteIndex","item","index","taskId","STUDENT_ADD_COURSE_SUCCESS","courseResourceRes","newCourseResource","TEACHER_ADD_COURSE_SUCCESS","allCourseRes","updateCourseFlag1","TEACHER_ADD_REMARK_SUCCESS","myCourseRes","updateCourseFlag2","teacherCourseId1","remark","myCourseList","TEACHER_TOGGLE_TASK_UPLOAD_SUCCESS","toggleCourseTask","closed","TEACHER_RELEASE_TASKS_SUCCESS","releaseTask","TEACHER_RELEASE_TASKS_FAILED","teacherUploadFlag2","TEACHER_UPDATE_TASK_SUCCESS","updateTask","TEACHER_UPDATE_TASK_FAILED","teacherUpdateFlag2","STUDENT_UPLOAD_HOMEWORK_SUCCESS","STUDENT_UPLOAD_HOMEWORK_FAILED","FETCH_SEARCH_COURSE_SUCCESS","TEACHER_CHECK_STUDENT_SUCCESS","TEACHER_DELETE_STUDENT_SUCCESS","arr"],"mappings":"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","sourcesContent":["import { fromJS,  } from \"immutable\";\r\nimport * as constants from \"../../constants/actionTypes\";\r\nconst defaultState = fromJS({\r\n    taskTotal: \" \",\r\n    courseTotal: \"\",\r\n    submitTotal: \"\",\r\n    downloadUrl: \"\",\r\n    courseTask: [],\r\n    taskResource: {},\r\n    myCourse: [],\r\n    allCourse: [],\r\n    unsubmitList: [],\r\n    submitList: [],\r\n    checkList : [],\r\n    studentCourseList: [],\r\n    teacherUploadFlag: false,\r\n    studentUploadFlag: false,\r\n    teacherUpdateFlag: false,\r\n    updateCourseFlag: false,\r\n});\r\nexport default (state = defaultState, action) => {\r\n    //那个游客也可见的课程页面，并用于学生添加课程\r\n    switch (action.type) {\r\n        case constants.QUERY_COURSE_RES_SUCCESS:\r\n            return state.merge({\r\n                taskTotal: action.payload.total,\r\n                courseResource: action.payload.items\r\n            });\r\n        case constants.QUERY_COURSE_TASK_SUCCESS:\r\n            let obj = {};\r\n            obj[action.teacherCourseId] = action.payload;\r\n            let newObj = Object.assign(obj,action.courseTask);\r\n            return state.set(\r\n                \"courseTask\", newObj,\r\n            );\r\n        case constants.QUERY_MY_COURSE_SUCCESS:\r\n            return state.set(\r\n                \"myCourse\", action.payload\r\n            );\r\n        case constants.TEACHER_QUERY_COURSE_SUCCESS:\r\n            return state.merge({\r\n                allCourse: action.payload.items,\r\n                courseTotal: action.payload.total,\r\n            });\r\n        case constants.STUDENT_QUERY_SUBMIT_SUCCESS:\r\n            return state.set(\r\n                \"checkList\", action.payload\r\n            );\r\n        case constants.TEACHER_QUERY_UNSUBMIT_SUCCESS:\r\n            return state.set(\r\n                \"unsubmitList\", action.payload\r\n            );\r\n        case constants.TEACHER_QUERY_SUBMIT_SUCCESS:\r\n            return state.merge({\r\n                submitTotal: action.payload.total,\r\n                submitList: action.payload.items\r\n            });\r\n        case constants.TEACHER_DOWNLOAD_SUBMIT_SUCCESS:\r\n            return state.set(\r\n                \"downloadUrl\", action.payload\r\n            );\r\n            //修改store\r\n            //学生删除课程\r\n        case constants.STUDENT_DELETE_COURSE_SUCCESS:\r\n            const myCourseRes_S = state.toJS().myCourse;\r\n            const courseResourceRes_S = state.toJS().courseResource;\r\n            const myCourseArr_S = [];\r\n            myCourseRes_S.map((e)=>(\r\n                myCourseArr_S.push(e.studentCourseId)\r\n              ));\r\n            courseResourceRes_S.map((e)=>{\r\n                if(e.teacherCourseId === action.teacherCourseId){\r\n                    e.added = !e.added;\r\n                }\r\n            });\r\n             const myCourseIndex_S = myCourseArr_S.indexOf(action.studentCourseId);\r\n            myCourseRes_S.splice(myCourseIndex_S, 1);\r\n            return state.merge({\r\n                myCourse: myCourseRes_S,\r\n                courseResource: courseResourceRes_S\r\n            });\r\n            //学生删除作业\r\n        case constants.STUDENT_DELETE_HOMEWORK_SUCCESS:\r\n            let checkListRes = state.toJS().checkList;\r\n            const checkListSearch = action.payload;\r\n            let checkListArr = [];\r\n            checkListRes.map((e)=>(\r\n                checkListArr.push(e.id)\r\n            ));\r\n            const checkListIndex = checkListArr.indexOf(checkListSearch);\r\n            checkListRes.splice(checkListIndex, 1);\r\n            return state.set(\r\n                \"checkList\", checkListRes\r\n            );\r\n            //老师删除课程后\r\n            case constants.TEACHER_DELETE_COURSE_SUCCESS:\r\n                const myCourseRes_T = state.toJS().myCourse;\r\n                const allCourseRes_T = state.toJS().allCourse;\r\n                let myCourseArr_T = [];\r\n                myCourseRes_T.map((e)=>(\r\n                    myCourseArr_T.push(e.teacherCourseId)\r\n                ));\r\n                allCourseRes_T.map((e) => {\r\n                    if(e.id === action.payload){\r\n                        e.added = !e.added;\r\n                    }\r\n                });\r\n                const myCourseIndex_T = myCourseArr_T.indexOf(action.payload);\r\n                myCourseRes_T.splice(myCourseIndex_T, 1);\r\n                return state.merge({\r\n                    myCourse: myCourseRes_T,\r\n                    allCourse: allCourseRes_T\r\n                });\r\n            //老师删除任务后\r\n            case constants.TEACHER_DELETE_TASK_SUCCESS:\r\n                let teacherDeleteTask = state.toJS().courseTask;\r\n                let deleteIndex = 0;\r\n                    teacherDeleteTask[action.teacherCourseId].map((item, index)=>{\r\n                    if(item.id === action.taskId){\r\n                        deleteIndex = index;\r\n                        return index;\r\n                    }\r\n                });\r\n                teacherDeleteTask[action.teacherCourseId].splice(deleteIndex, 1);\r\n                return state.set(\r\n                    \"courseTask\", teacherDeleteTask\r\n                );\r\n\r\n            //学生添加课程\r\n        case constants.STUDENT_ADD_COURSE_SUCCESS:\r\n            const courseResourceRes = state.toJS().courseResource;\r\n            const newCourseResource = courseResourceRes.map((e)=>{\r\n                    if(e.teacherCourseId === action.payload){\r\n                        e.added = !e.added;\r\n                    }\r\n                    return e;\r\n                });\r\n            return state.set(\r\n                \"courseResource\", newCourseResource\r\n            );\r\n            //老师添加课程后：\r\n        case constants.TEACHER_ADD_COURSE_SUCCESS:\r\n            const allCourseRes = state.toJS().allCourse;\r\n            const updateCourseFlag1 = state.toJS().updateCourseFlag;\r\n            allCourseRes.map((e) => {\r\n                if(e.id === action.payload){\r\n                    e.added = !e.added;\r\n                }\r\n            });\r\n            return state.merge({\r\n                allCourse: allCourseRes,\r\n                updateCourseFlag: !updateCourseFlag1,\r\n            });\r\n\r\n            //remark改变后\r\n        case constants.TEACHER_ADD_REMARK_SUCCESS:\r\n            let myCourseRes = state.toJS().myCourse;\r\n            const updateCourseFlag2 = state.toJS().updateCourseFlag;\r\n            let teacherCourseId1 = action.payload.teacherCourseId;\r\n            let remark = action.payload.remark;\r\n            let myCourseList = myCourseRes.map((e)=>{\r\n                if(e.teacherCourseId === teacherCourseId1)\r\n                     e.remark = remark ;\r\n                return e;\r\n            });\r\n            return state.merge({\r\n                myCourse: myCourseList,\r\n                updateCourseFlag: !updateCourseFlag2,\r\n\r\n            });\r\n            //开启上传下载作业！\r\n        case constants.TEACHER_TOGGLE_TASK_UPLOAD_SUCCESS:\r\n            let toggleCourseTask = state.toJS().courseTask;\r\n                toggleCourseTask[action.teacherCourseId].map((e)=>{\r\n                if(e.id === action.taskId){\r\n                    e.closed = !e.closed;\r\n                    return e;\r\n                }\r\n            });\r\n            return state.set(\r\n                \"courseTask\",toggleCourseTask\r\n            );\r\n            //老师发布任务后，任务动态显示在列表在\r\n        case constants.TEACHER_RELEASE_TASKS_SUCCESS:\r\n            const releaseTask = state.toJS().courseTask;\r\n            const teacherUploadFlag = state.toJS().teacherUploadFlag;\r\n            releaseTask[action.teacherCourseId] = action.payload;\r\n            return state.merge({\r\n                courseTask: releaseTask,\r\n                teacherUploadFlag: !teacherUploadFlag,\r\n            });\r\n            //老师发布任务失败\r\n        case constants.TEACHER_RELEASE_TASKS_FAILED:\r\n            const teacherUploadFlag2 = state.toJS().teacherUploadFlag;\r\n            return state.set(\r\n                \"teacherUploadFlag\",!teacherUploadFlag2\r\n            );\r\n            //老师修改任务后，任务变化\r\n        case constants.TEACHER_UPDATE_TASK_SUCCESS:\r\n            const updateTask =  state.toJS().courseTask;\r\n            const teacherUpdateFlag = state.toJS().teacherUpdateFlag;\r\n            updateTask[action.teacherCourseId] = action.payload;\r\n            return state.merge({\r\n                courseTask: updateTask,\r\n                teacherUpdateFlag: !teacherUpdateFlag\r\n            });\r\n            //老师修改任务失败\r\n        case constants.TEACHER_UPDATE_TASK_FAILED:\r\n            const teacherUpdateFlag2 = state.toJS().teacherUpdateFlag;\r\n            return state.set(\r\n                \"teacherUpdateFlag\", !teacherUpdateFlag2\r\n            );\r\n            //学生上传任务成功,学生上传任务失败\r\n        case constants.STUDENT_UPLOAD_HOMEWORK_SUCCESS:\r\n        case constants.STUDENT_UPLOAD_HOMEWORK_FAILED:\r\n            const studentUploadFlag = state.toJS().studentUploadFlag;\r\n            return state.set(\r\n                \"studentUploadFlag\", !studentUploadFlag\r\n            );\r\n            //搜索课程\r\n        case constants.FETCH_SEARCH_COURSE_SUCCESS:\r\n            return state.merge({\r\n                taskTotal: action.payload.total,\r\n                courseResource: action.payload.items\r\n            });\r\n        case constants.TEACHER_CHECK_STUDENT_SUCCESS:\r\n            return state.set(\r\n                \"studentCourseList\", action.payload,\r\n            );\r\n        case constants.TEACHER_DELETE_STUDENT_SUCCESS:\r\n            let studentCourseList = state.toJS().studentCourseList;\r\n            let arr = [];\r\n            studentCourseList.map(e=>{\r\n                if(e.studentCourseId !== action.payload) {\r\n                    return arr.push(e);\r\n                }\r\n            });\r\n            return state.set(\r\n                \"studentCourseList\", arr\r\n            );\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}