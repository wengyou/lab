{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertRawToEditorState = exports.convertEditorStateToRaw = exports.convertHTMLToEditorState = exports.convertEditorStateToHTML = exports.convertHTMLToRaw = exports.convertRawToHTML = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _draftConvert = require('draft-convert');\n\nvar _configs = require('./configs');\n\nvar _draftJs = require('draft-js');\n\nvar defaultConvertOptions = {\n  fontFamilies: _configs.defaultFontFamilies\n};\n\nvar convertRawToHTML = exports.convertRawToHTML = function convertRawToHTML(rawContent, options) {\n  options = _extends({}, defaultConvertOptions, options);\n\n  try {\n    var contentState = (0, _draftJs.convertFromRaw)(rawContent);\n    options.contentState = contentState;\n    return (0, _draftConvert.convertToHTML)((0, _configs.getToHTMLConfig)(options))(contentState);\n  } catch (error) {\n    console.warn(error);\n    return '';\n  }\n};\n\nvar convertHTMLToRaw = exports.convertHTMLToRaw = function convertHTMLToRaw(HTMLString, options, source) {\n  options = _extends({}, defaultConvertOptions, options);\n\n  try {\n    var contentState = (0, _draftConvert.convertFromHTML)((0, _configs.getFromHTMLConfig)(options, source))(HTMLString);\n    return (0, _draftJs.convertToRaw)(contentState);\n  } catch (error) {\n    console.warn(error);\n    return {};\n  }\n};\n\nvar convertEditorStateToHTML = exports.convertEditorStateToHTML = function convertEditorStateToHTML(editorState, options) {\n  options = _extends({}, defaultConvertOptions, options);\n\n  try {\n    var contentState = editorState.getCurrentContent();\n    options.contentState = contentState;\n    return (0, _draftConvert.convertToHTML)((0, _configs.getToHTMLConfig)(options))(contentState);\n  } catch (error) {\n    console.warn(error);\n    return '';\n  }\n};\n\nvar convertHTMLToEditorState = exports.convertHTMLToEditorState = function convertHTMLToEditorState(HTMLString, editorDecorators, options, source) {\n  options = _extends({}, defaultConvertOptions, options);\n\n  try {\n    return _draftJs.EditorState.createWithContent((0, _draftConvert.convertFromHTML)((0, _configs.getFromHTMLConfig)(options, source))(HTMLString), editorDecorators);\n  } catch (error) {\n    console.warn(error);\n    return _draftJs.EditorState.createEmpty(editorDecorators);\n  }\n};\n\nvar convertEditorStateToRaw = exports.convertEditorStateToRaw = function convertEditorStateToRaw(editorState) {\n  return (0, _draftJs.convertToRaw)(editorState.getCurrentContent());\n};\n\nvar convertRawToEditorState = exports.convertRawToEditorState = function convertRawToEditorState(rawContent, editorDecorators) {\n  try {\n    return _draftJs.EditorState.createWithContent((0, _draftJs.convertFromRaw)(rawContent), editorDecorators);\n  } catch (error) {\n    console.warn(error);\n    return _draftJs.EditorState.createEmpty(editorDecorators);\n  }\n};","map":{"version":3,"sources":["../src/index.js"],"names":["defaultConvertOptions","fontFamilies","convertRawToHTML","options","contentState","console","convertHTMLToRaw","convertEditorStateToHTML","editorState","convertHTMLToEditorState","convertEditorStateToRaw","convertRawToEditorState"],"mappings":"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","sourcesContent":["import { convertToHTML, convertFromHTML } from 'draft-convert'\nimport { getToHTMLConfig, getFromHTMLConfig, defaultFontFamilies } from './configs'\nimport { convertFromRaw, convertToRaw, EditorState } from 'draft-js'\n\nconst defaultConvertOptions = {\n  fontFamilies: defaultFontFamilies\n}\n\nexport const convertRawToHTML = (rawContent, options) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    const contentState = convertFromRaw(rawContent)\n    options.contentState = contentState\n    return convertToHTML(getToHTMLConfig(options))(contentState)\n  } catch (error) {\n    console.warn(error)\n    return ''\n  }\n\n}\n\nexport const convertHTMLToRaw = (HTMLString, options, source) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    const contentState = convertFromHTML(getFromHTMLConfig(options, source))(HTMLString)\n    return convertToRaw(contentState)\n  } catch (error) {\n    console.warn(error)\n    return {}\n  }\n\n}\n\nexport const convertEditorStateToHTML = (editorState, options) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    const contentState = editorState.getCurrentContent()\n    options.contentState = contentState\n    return convertToHTML(getToHTMLConfig(options))(contentState)\n  } catch (error) {\n    console.warn(error)\n    return ''\n  }\n\n}\n\nexport const convertHTMLToEditorState = (HTMLString, editorDecorators, options, source) => {\n\n  options = { ...defaultConvertOptions, ...options }\n\n  try {\n    return EditorState.createWithContent(convertFromHTML(getFromHTMLConfig(options, source))(HTMLString), editorDecorators)\n  } catch (error) {\n    console.warn(error)\n    return EditorState.createEmpty(editorDecorators)\n  }\n\n}\n\nexport const convertEditorStateToRaw = (editorState) => {\n  return convertToRaw(editorState.getCurrentContent())\n}\n\nexport const convertRawToEditorState = (rawContent, editorDecorators) => {\n\n  try {\n    return EditorState.createWithContent(convertFromRaw(rawContent), editorDecorators)\n  } catch (error) {\n    console.warn(error)\n    return EditorState.createEmpty(editorDecorators)\n  }\n \n}"]},"metadata":{},"sourceType":"script"}