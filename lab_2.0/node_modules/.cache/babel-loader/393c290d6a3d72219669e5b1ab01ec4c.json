{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFromHTMLConfig = exports.getToHTMLConfig = exports.blocks = exports.getHexColor = exports.defaultFontFamilies = exports.namedColors = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar namedColors = exports.namedColors = {\n  \"aliceblue\": \"#f0f8ff\",\n  \"antiquewhite\": \"#faebd7\",\n  \"aqua\": \"#00ffff\",\n  \"aquamarine\": \"#7fffd4\",\n  \"azure\": \"#f0ffff\",\n  \"beige\": \"#f5f5dc\",\n  \"bisque\": \"#ffe4c4\",\n  \"black\": \"#000000\",\n  \"blanchedalmond\": \"#ffebcd\",\n  \"blue\": \"#0000ff\",\n  \"blueviolet\": \"#8a2be2\",\n  \"brown\": \"#a52a2a\",\n  \"burlywood\": \"#deb887\",\n  \"cadetblue\": \"#5f9ea0\",\n  \"chartreuse\": \"#7fff00\",\n  \"chocolate\": \"#d2691e\",\n  \"coral\": \"#ff7f50\",\n  \"cornflowerblue\": \"#6495ed\",\n  \"cornsilk\": \"#fff8dc\",\n  \"crimson\": \"#dc143c\",\n  \"cyan\": \"#00ffff\",\n  \"darkblue\": \"#00008b\",\n  \"darkcyan\": \"#008b8b\",\n  \"darkgoldenrod\": \"#b8860b\",\n  \"darkgray\": \"#a9a9a9\",\n  \"darkgreen\": \"#006400\",\n  \"darkkhaki\": \"#bdb76b\",\n  \"darkmagenta\": \"#8b008b\",\n  \"darkolivegreen\": \"#556b2f\",\n  \"darkorange\": \"#ff8c00\",\n  \"darkorchid\": \"#9932cc\",\n  \"darkred\": \"#8b0000\",\n  \"darksalmon\": \"#e9967a\",\n  \"darkseagreen\": \"#8fbc8f\",\n  \"darkslateblue\": \"#483d8b\",\n  \"darkslategray\": \"#2f4f4f\",\n  \"darkturquoise\": \"#00ced1\",\n  \"darkviolet\": \"#9400d3\",\n  \"deeppink\": \"#ff1493\",\n  \"deepskyblue\": \"#00bfff\",\n  \"dimgray\": \"#696969\",\n  \"dodgerblue\": \"#1e90ff\",\n  \"firebrick\": \"#b22222\",\n  \"floralwhite\": \"#fffaf0\",\n  \"forestgreen\": \"#228b22\",\n  \"fuchsia\": \"#ff00ff\",\n  \"gainsboro\": \"#dcdcdc\",\n  \"ghostwhite\": \"#f8f8ff\",\n  \"gold\": \"#ffd700\",\n  \"goldenrod\": \"#daa520\",\n  \"gray\": \"#808080\",\n  \"green\": \"#008000\",\n  \"greenyellow\": \"#adff2f\",\n  \"honeydew\": \"#f0fff0\",\n  \"hotpink\": \"#ff69b4\",\n  \"indianred \": \"#cd5c5c\",\n  \"indigo\": \"#4b0082\",\n  \"ivory\": \"#fffff0\",\n  \"khaki\": \"#f0e68c\",\n  \"lavender\": \"#e6e6fa\",\n  \"lavenderblush\": \"#fff0f5\",\n  \"lawngreen\": \"#7cfc00\",\n  \"lemonchiffon\": \"#fffacd\",\n  \"lightblue\": \"#add8e6\",\n  \"lightcoral\": \"#f08080\",\n  \"lightcyan\": \"#e0ffff\",\n  \"lightgoldenrodyellow\": \"#fafad2\",\n  \"lightgrey\": \"#d3d3d3\",\n  \"lightgreen\": \"#90ee90\",\n  \"lightpink\": \"#ffb6c1\",\n  \"lightsalmon\": \"#ffa07a\",\n  \"lightseagreen\": \"#20b2aa\",\n  \"lightskyblue\": \"#87cefa\",\n  \"lightslategray\": \"#778899\",\n  \"lightsteelblue\": \"#b0c4de\",\n  \"lightyellow\": \"#ffffe0\",\n  \"lime\": \"#00ff00\",\n  \"limegreen\": \"#32cd32\",\n  \"linen\": \"#faf0e6\",\n  \"magenta\": \"#ff00ff\",\n  \"maroon\": \"#800000\",\n  \"mediumaquamarine\": \"#66cdaa\",\n  \"mediumblue\": \"#0000cd\",\n  \"mediumorchid\": \"#ba55d3\",\n  \"mediumpurple\": \"#9370d8\",\n  \"mediumseagreen\": \"#3cb371\",\n  \"mediumslateblue\": \"#7b68ee\",\n  \"mediumspringgreen\": \"#00fa9a\",\n  \"mediumturquoise\": \"#48d1cc\",\n  \"mediumvioletred\": \"#c71585\",\n  \"midnightblue\": \"#191970\",\n  \"mintcream\": \"#f5fffa\",\n  \"mistyrose\": \"#ffe4e1\",\n  \"moccasin\": \"#ffe4b5\",\n  \"navajowhite\": \"#ffdead\",\n  \"navy\": \"#000080\",\n  \"oldlace\": \"#fdf5e6\",\n  \"olive\": \"#808000\",\n  \"olivedrab\": \"#6b8e23\",\n  \"orange\": \"#ffa500\",\n  \"orangered\": \"#ff4500\",\n  \"orchid\": \"#da70d6\",\n  \"palegoldenrod\": \"#eee8aa\",\n  \"palegreen\": \"#98fb98\",\n  \"paleturquoise\": \"#afeeee\",\n  \"palevioletred\": \"#d87093\",\n  \"papayawhip\": \"#ffefd5\",\n  \"peachpuff\": \"#ffdab9\",\n  \"peru\": \"#cd853f\",\n  \"pink\": \"#ffc0cb\",\n  \"plum\": \"#dda0dd\",\n  \"powderblue\": \"#b0e0e6\",\n  \"purple\": \"#800080\",\n  \"rebeccapurple\": \"#663399\",\n  \"red\": \"#ff0000\",\n  \"rosybrown\": \"#bc8f8f\",\n  \"royalblue\": \"#4169e1\",\n  \"saddlebrown\": \"#8b4513\",\n  \"salmon\": \"#fa8072\",\n  \"sandybrown\": \"#f4a460\",\n  \"seagreen\": \"#2e8b57\",\n  \"seashell\": \"#fff5ee\",\n  \"sienna\": \"#a0522d\",\n  \"silver\": \"#c0c0c0\",\n  \"skyblue\": \"#87ceeb\",\n  \"slateblue\": \"#6a5acd\",\n  \"slategray\": \"#708090\",\n  \"snow\": \"#fffafa\",\n  \"springgreen\": \"#00ff7f\",\n  \"steelblue\": \"#4682b4\",\n  \"tan\": \"#d2b48c\",\n  \"teal\": \"#008080\",\n  \"thistle\": \"#d8bfd8\",\n  \"tomato\": \"#ff6347\",\n  \"turquoise\": \"#40e0d0\",\n  \"violet\": \"#ee82ee\",\n  \"wheat\": \"#f5deb3\",\n  \"white\": \"#ffffff\",\n  \"whitesmoke\": \"#f5f5f5\",\n  \"yellow\": \"#ffff00\",\n  \"yellowgreen\": \"#9acd32\"\n};\n\nvar getStyleValue = function getStyleValue(style) {\n  return style.split('-')[1];\n};\n\nvar defaultUnitExportFn = function defaultUnitExportFn(unit) {\n  return unit + 'px';\n};\n\nvar defaultUnitImportFn = function defaultUnitImportFn(unit) {\n  return unit.replace('px', '');\n};\n\nvar ignoredNodeAttributes = ['style'];\nvar ignoredEntityNodeAttributes = ['style', 'href', 'target', 'alt', 'title', 'id', 'controls', 'autoplay', 'loop', 'poster'];\n\nvar spreadNodeAttributes = function spreadNodeAttributes(attributesObject) {\n  return Object.keys(attributesObject).reduce(function (attributeString, attributeName) {\n    return attributeString + \" \" + attributeName + \"=\\\"\" + attributesObject[attributeName] + \"\\\"\";\n  }, '').replace(/^\\s$/, '');\n};\n\nvar defaultFontFamilies = exports.defaultFontFamilies = [{\n  name: 'Araial',\n  family: 'Arial, Helvetica, sans-serif'\n}, {\n  name: 'Georgia',\n  family: 'Georgia, serif'\n}, {\n  name: 'Impact',\n  family: 'Impact, serif'\n}, {\n  name: 'Monospace',\n  family: '\"Courier New\", Courier, monospace'\n}, {\n  name: 'Tahoma',\n  family: \"tahoma, arial, 'Hiragino Sans GB', 宋体, sans-serif\"\n}];\n\nvar getHexColor = exports.getHexColor = function getHexColor(color) {\n  color = color.replace('color:', '').replace(';', '').replace(' ', '');\n\n  if (/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(color)) {\n    return color;\n  } else if (namedColors[color]) {\n    return namedColors[color];\n  } else if (color.indexOf('rgb') === 0) {\n    var rgbArray = color.split(',');\n    var convertedColor = rgbArray.length < 3 ? null : '#' + [rgbArray[0], rgbArray[1], rgbArray[2]].map(function (x) {\n      var hex = parseInt(x.replace(/\\D/g, ''), 10).toString(16);\n      return hex.length === 1 ? '0' + hex : hex;\n    }).join('');\n    return /^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(convertedColor) ? convertedColor : null;\n  } else {\n    return null;\n  }\n};\n\nvar blocks = exports.blocks = {\n  'header-one': 'h1',\n  'header-two': 'h2',\n  'header-three': 'h3',\n  'header-four': 'h4',\n  'header-five': 'h5',\n  'header-six': 'h6',\n  'unstyled': 'p',\n  'blockquote': 'blockquote'\n};\nvar blockTypes = Object.keys(blocks);\nvar blockNames = blockTypes.map(function (key) {\n  return blocks[key];\n});\n\nvar convertAtomicBlock = function convertAtomicBlock(block, contentState, blockNodeAttributes) {\n  if (!block || !block.key) {\n    return _react2.default.createElement(\"p\", null);\n  }\n\n  var contentBlock = contentState.getBlockForKey(block.key);\n\n  var className = blockNodeAttributes.class,\n      nodeAttrAsProps = _objectWithoutProperties(blockNodeAttributes, [\"class\"]);\n\n  nodeAttrAsProps.className = className;\n\n  if (!contentBlock) {\n    return _react2.default.createElement(\"p\", null);\n  }\n\n  var entityKey = contentBlock.getEntityAt(0);\n\n  if (!entityKey) {\n    return _react2.default.createElement(\"p\", null);\n  }\n\n  var entity = contentState.getEntity(entityKey);\n  var mediaType = entity.getType().toLowerCase();\n  var _block$data = block.data,\n      float = _block$data.float,\n      alignment = _block$data.alignment;\n\n  var _entity$getData = entity.getData(),\n      url = _entity$getData.url,\n      link = _entity$getData.link,\n      link_target = _entity$getData.link_target,\n      width = _entity$getData.width,\n      height = _entity$getData.height,\n      meta = _entity$getData.meta;\n\n  if (mediaType === 'image') {\n    var imageWrapStyle = {};\n    var styledClassName = '';\n\n    if (float) {\n      imageWrapStyle.float = float;\n      styledClassName += ' float-' + float;\n    } else if (alignment) {\n      imageWrapStyle.textAlign = alignment;\n      styledClassName += ' align-' + alignment;\n    }\n\n    if (link) {\n      return _react2.default.createElement(\"div\", {\n        className: \"media-wrap image-wrap\" + styledClassName,\n        style: imageWrapStyle\n      }, _react2.default.createElement(\"a\", {\n        style: {\n          display: 'inline-block'\n        },\n        href: link,\n        target: link_target\n      }, _react2.default.createElement(\"img\", _extends({}, nodeAttrAsProps, meta, {\n        src: url,\n        width: width,\n        height: height,\n        style: {\n          width: width,\n          height: height\n        }\n      }))));\n    } else {\n      return _react2.default.createElement(\"div\", {\n        className: \"media-wrap image-wrap\" + styledClassName,\n        style: imageWrapStyle\n      }, _react2.default.createElement(\"img\", _extends({}, nodeAttrAsProps, meta, {\n        src: url,\n        width: width,\n        height: height,\n        style: {\n          width: width,\n          height: height\n        }\n      })));\n    }\n  } else if (mediaType === 'audio') {\n    return _react2.default.createElement(\"div\", {\n      className: \"media-wrap audio-wrap\"\n    }, _react2.default.createElement(\"audio\", _extends({\n      controls: true\n    }, nodeAttrAsProps, meta, {\n      src: url\n    })));\n  } else if (mediaType === 'video') {\n    return _react2.default.createElement(\"div\", {\n      className: \"media-wrap video-wrap\"\n    }, _react2.default.createElement(\"video\", _extends({\n      controls: true\n    }, nodeAttrAsProps, meta, {\n      src: url,\n      width: width,\n      height: height\n    })));\n  } else if (mediaType === 'embed') {\n    return _react2.default.createElement(\"div\", {\n      className: \"media-wrap embed-wrap\"\n    }, _react2.default.createElement(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: url\n      }\n    }));\n  } else if (mediaType === 'hr') {\n    return _react2.default.createElement(\"hr\", null);\n  } else {\n    return _react2.default.createElement(\"p\", null);\n  }\n};\n\nvar entityToHTML = function entityToHTML(options) {\n  return function (entity, originalText) {\n    var entityExportFn = options.entityExportFn;\n    var entityType = entity.type.toLowerCase();\n\n    if (entityExportFn) {\n      var customOutput = entityExportFn(entity, originalText);\n\n      if (customOutput) {\n        return customOutput;\n      }\n    }\n\n    if (entityType === 'link') {\n      var _ref = entity.data.nodeAttributes || {},\n          className = _ref.class,\n          nodeAttrAsProps = _objectWithoutProperties(_ref, [\"class\"]);\n\n      nodeAttrAsProps.className = className;\n      return _react2.default.createElement(\"a\", _extends({\n        href: entity.data.href,\n        target: entity.data.target\n      }, nodeAttrAsProps));\n    }\n  };\n};\n\nvar styleToHTML = function styleToHTML(options) {\n  return function (style) {\n    var unitExportFn = options.unitExportFn || defaultUnitExportFn;\n\n    if (options.styleExportFn) {\n      var customOutput = options.styleExportFn(style, options);\n\n      if (customOutput) {\n        return customOutput;\n      }\n    }\n\n    style = style.toLowerCase();\n\n    if (style === 'strikethrough') {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          textDecoration: 'line-through'\n        }\n      });\n    } else if (style === 'superscript') {\n      return _react2.default.createElement(\"sup\", null);\n    } else if (style === 'subscript') {\n      return _react2.default.createElement(\"sub\", null);\n    } else if (style.indexOf('color-') === 0) {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          color: '#' + getStyleValue(style)\n        }\n      });\n    } else if (style.indexOf('bgcolor-') === 0) {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          backgroundColor: '#' + getStyleValue(style)\n        }\n      });\n    } else if (style.indexOf('fontsize-') === 0) {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          fontSize: unitExportFn(getStyleValue(style), 'font-size', 'html')\n        }\n      });\n    } else if (style.indexOf('lineheight-') === 0) {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          lineHeight: unitExportFn(getStyleValue(style), 'line-height', 'html')\n        }\n      });\n    } else if (style.indexOf('letterspacing-') === 0) {\n      return _react2.default.createElement(\"span\", {\n        style: {\n          letterSpacing: unitExportFn(getStyleValue(style), 'letter-spacing', 'html')\n        }\n      });\n    } else if (style.indexOf('fontfamily-') === 0) {\n      var fontFamily = options.fontFamilies.find(function (item) {\n        return item.name.toLowerCase() === getStyleValue(style);\n      });\n      if (!fontFamily) return;\n      return _react2.default.createElement(\"span\", {\n        style: {\n          fontFamily: fontFamily.family\n        }\n      });\n    }\n  };\n};\n\nvar blockToHTML = function blockToHTML(options) {\n  return function (block) {\n    var blockExportFn = options.blockExportFn,\n        contentState = options.contentState;\n\n    if (blockExportFn) {\n      var customOutput = blockExportFn(contentState, block);\n\n      if (customOutput) {\n        return customOutput;\n      }\n    }\n\n    var blockStyle = '';\n    var blockType = block.type.toLowerCase();\n    var _block$data2 = block.data,\n        textAlign = _block$data2.textAlign,\n        textIndent = _block$data2.textIndent,\n        _block$data2$nodeAttr = _block$data2.nodeAttributes,\n        nodeAttributes = _block$data2$nodeAttr === undefined ? {} : _block$data2$nodeAttr;\n    var attributeString = spreadNodeAttributes(nodeAttributes);\n\n    if (textAlign || textIndent) {\n      blockStyle = ' style=\"';\n\n      if (textAlign) {\n        blockStyle += \"text-align:\" + textAlign + \";\";\n      }\n\n      if (textIndent && !isNaN(textIndent) && textIndent > 0) {\n        blockStyle += \"text-indent:\" + textIndent * 2 + \"em;\";\n      }\n\n      blockStyle += '\"';\n    }\n\n    if (blockType === 'atomic') {\n      return convertAtomicBlock(block, contentState, nodeAttributes);\n    } else if (blockType === 'code-block') {\n      var previousBlock = contentState.getBlockBefore(block.key);\n      var nextBlock = contentState.getBlockAfter(block.key);\n      var previousBlockType = previousBlock && previousBlock.getType();\n      var nextBlockType = nextBlock && nextBlock.getType();\n      var start = '';\n      var end = '';\n\n      if (previousBlockType !== 'code-block') {\n        start = \"<pre\" + attributeString + \"><code>\";\n      } else {\n        start = '';\n      }\n\n      if (nextBlockType !== 'code-block') {\n        end = '</code></pre>';\n      } else {\n        end = '<br/>';\n      }\n\n      return {\n        start: start,\n        end: end\n      };\n    } else if (blocks[blockType]) {\n      return {\n        start: \"<\" + blocks[blockType] + blockStyle + attributeString + \">\",\n        end: \"</\" + blocks[blockType] + \">\"\n      };\n    } else if (blockType === 'unordered-list-item') {\n      return {\n        start: \"<li\" + blockStyle + attributeString + \">\",\n        end: '</li>',\n        nest: _react2.default.createElement(\"ul\", null)\n      };\n    } else if (blockType === 'ordered-list-item') {\n      return {\n        start: \"<li\" + blockStyle + attributeString + \">\",\n        end: '</li>',\n        nest: _react2.default.createElement(\"ol\", null)\n      };\n    }\n  };\n};\n\nvar htmlToStyle = function htmlToStyle(options, source) {\n  return function (nodeName, node, currentStyle) {\n    if (!node || !node.style) {\n      return currentStyle;\n    }\n\n    var unitImportFn = options.unitImportFn || defaultUnitImportFn;\n    var newStyle = currentStyle;\n    [].forEach.call(node.style, function (style) {\n      if (nodeName === 'span' && style === 'color') {\n        var color = getHexColor(node.style.color);\n        newStyle = color ? newStyle.add('COLOR-' + color.replace('#', '').toUpperCase()) : newStyle;\n      } else if (nodeName === 'span' && style === 'background-color') {\n        var _color = getHexColor(node.style.backgroundColor);\n\n        newStyle = _color ? newStyle.add('BGCOLOR-' + _color.replace('#', '').toUpperCase()) : newStyle;\n      } else if (nodeName === 'span' && style === 'font-size') {\n        newStyle = newStyle.add('FONTSIZE-' + unitImportFn(node.style.fontSize, 'font-size', source));\n      } else if (nodeName === 'span' && style === 'line-height' && !isNaN(parseFloat(node.style.lineHeight, 10))) {\n        newStyle = newStyle.add('LINEHEIGHT-' + unitImportFn(node.style.lineHeight, 'line-height', source));\n      } else if (nodeName === 'span' && style === 'letter-spacing' && !isNaN(parseFloat(node.style.letterSpacing, 10))) {\n        newStyle = newStyle.add('LETTERSPACING-' + unitImportFn(node.style.letterSpacing, 'letter-spacing', source));\n      } else if (nodeName === 'span' && style === 'text-decoration') {\n        if (node.style.textDecoration === 'line-through') {\n          newStyle = newStyle.add('STRIKETHROUGH');\n        } else if (node.style.textDecoration === 'underline') {\n          newStyle = newStyle.add('UNDERLINE');\n        }\n      } else if (nodeName === 'span' && style === 'font-family') {\n        var fontFamily = options.fontFamilies.find(function (item) {\n          return item.family.toLowerCase() === node.style.fontFamily.toLowerCase();\n        });\n        if (!fontFamily) return;\n        newStyle = newStyle.add('FONTFAMILY-' + fontFamily.name.toUpperCase());\n      }\n    });\n\n    if (nodeName === 'sup') {\n      newStyle = newStyle.add('SUPERSCRIPT');\n    } else if (nodeName === 'sub') {\n      newStyle = newStyle.add('SUBSCRIPT');\n    }\n\n    options.styleImportFn && (newStyle = options.styleImportFn(nodeName, node, newStyle, source) || newStyle);\n    return newStyle;\n  };\n};\n\nvar htmlToEntity = function htmlToEntity(options, source) {\n  return function (nodeName, node, createEntity) {\n    if (options && options.entityImportFn) {\n      var customInput = options.entityImportFn(nodeName, node, createEntity, source);\n\n      if (customInput) {\n        return customInput;\n      }\n    }\n\n    nodeName = nodeName.toLowerCase();\n    var alt = node.alt,\n        title = node.title,\n        id = node.id,\n        controls = node.controls,\n        autoplay = node.autoplay,\n        loop = node.loop,\n        poster = node.poster;\n    var meta = {};\n    var nodeAttributes = {};\n    id && (meta.id = id);\n    alt && (meta.alt = alt);\n    title && (meta.title = title);\n    controls && (meta.controls = controls);\n    autoplay && (meta.autoPlay = autoplay);\n    loop && (meta.loop = loop);\n    poster && (meta.poster = poster);\n    node.attributes && Object.keys(node.attributes).forEach(function (key) {\n      var attr = node.attributes[key];\n      ignoredEntityNodeAttributes.indexOf(attr.name) === -1 && (nodeAttributes[attr.name] = attr.value);\n    });\n\n    if (nodeName === 'a' && !node.querySelectorAll('img').length) {\n      var href = node.getAttribute('href');\n\n      var _target = node.getAttribute('target');\n\n      return createEntity('LINK', 'MUTABLE', {\n        href: href,\n        target: _target,\n        nodeAttributes: nodeAttributes\n      });\n    } else if (nodeName === 'audio') {\n      return createEntity('AUDIO', 'IMMUTABLE', {\n        url: node.getAttribute('src'),\n        meta: meta,\n        nodeAttributes: nodeAttributes\n      });\n    } else if (nodeName === 'video') {\n      return createEntity('VIDEO', 'IMMUTABLE', {\n        url: node.getAttribute('src'),\n        meta: meta,\n        nodeAttributes: nodeAttributes\n      });\n    } else if (nodeName === 'img') {\n      var parentNode = node.parentNode;\n      var entityData = {\n        meta: meta\n      };\n      var _node$style = node.style,\n          width = _node$style.width,\n          height = _node$style.height;\n      entityData.url = node.getAttribute('src');\n      width && (entityData.width = width);\n      height && (entityData.height = height);\n\n      if (parentNode.nodeName.toLowerCase() === 'a') {\n        entityData.link = parentNode.getAttribute('href');\n        entityData.link_target = parentNode.getAttribute('target');\n      }\n\n      return createEntity('IMAGE', 'IMMUTABLE', entityData);\n    } else if (nodeName === 'hr') {\n      return createEntity('HR', 'IMMUTABLE', {});\n    } else if (node.parentNode && node.parentNode.classList.contains('embed-wrap')) {\n      var embedContent = node.innerHTML || node.outerHTML;\n\n      if (embedContent) {\n        return createEntity('EMBED', 'IMMUTABLE', {\n          url: embedContent\n        });\n      }\n    }\n  };\n};\n\nvar htmlToBlock = function htmlToBlock(options, source) {\n  return function (nodeName, node) {\n    if (options && options.blockImportFn) {\n      var customInput = options.blockImportFn(nodeName, node, source);\n\n      if (customInput) {\n        return customInput;\n      }\n    }\n\n    var nodeAttributes = {};\n    var nodeStyle = node.style || {};\n    node.attributes && Object.keys(node.attributes).forEach(function (key) {\n      var attr = node.attributes[key];\n      ignoredNodeAttributes.indexOf(attr.name) === -1 && (nodeAttributes[attr.name] = attr.value);\n    });\n\n    if (node.classList && node.classList.contains('media-wrap')) {\n      return {\n        type: 'atomic',\n        data: {\n          nodeAttributes: nodeAttributes,\n          float: nodeStyle.float,\n          alignment: nodeStyle.textAlign\n        }\n      };\n    } else if (nodeName === 'img') {\n      return {\n        type: 'atomic',\n        data: {\n          nodeAttributes: nodeAttributes,\n          float: nodeStyle.float,\n          alignment: nodeStyle.textAlign\n        }\n      };\n    } else if (nodeName === 'hr') {\n      return {\n        type: 'atomic',\n        data: {\n          nodeAttributes: nodeAttributes\n        }\n      };\n    } else if (nodeName === 'pre') {\n      node.innerHTML = node.innerHTML.replace(/<code(.*?)>/g, '').replace(/<\\/code>/g, '');\n      return {\n        type: 'code-block',\n        data: {\n          nodeAttributes: nodeAttributes\n        }\n      };\n    } else if (blockNames.indexOf(nodeName) !== -1) {\n      var blockData = {\n        nodeAttributes: nodeAttributes\n      };\n\n      if (nodeStyle.textAlign) {\n        blockData.textAlign = nodeStyle.textAlign;\n      }\n\n      if (nodeStyle.textIndent) {\n        blockData.textIndent = /^\\d+em$/.test(nodeStyle.textIndent) ? Math.ceil(parseInt(nodeStyle.textIndent, 10) / 2) : 1;\n      }\n\n      return {\n        type: blockTypes[blockNames.indexOf(nodeName)],\n        data: blockData\n      };\n    }\n  };\n};\n\nvar getToHTMLConfig = exports.getToHTMLConfig = function getToHTMLConfig(options) {\n  return {\n    styleToHTML: styleToHTML(options),\n    entityToHTML: entityToHTML(options),\n    blockToHTML: blockToHTML(options)\n  };\n};\n\nvar getFromHTMLConfig = exports.getFromHTMLConfig = function getFromHTMLConfig(options) {\n  var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unknow';\n  return {\n    htmlToStyle: htmlToStyle(options, source),\n    htmlToEntity: htmlToEntity(options, source),\n    htmlToBlock: htmlToBlock(options, source)\n  };\n};","map":{"version":3,"sources":["../src/configs.js"],"names":["namedColors","getStyleValue","style","defaultUnitExportFn","unit","defaultUnitImportFn","ignoredNodeAttributes","ignoredEntityNodeAttributes","spreadNodeAttributes","attributeString","attributesObject","defaultFontFamilies","name","family","getHexColor","color","rgbArray","convertedColor","hex","parseInt","x","blocks","blockTypes","Object","blockNames","convertAtomicBlock","block","contentBlock","contentState","className","nodeAttrAsProps","blockNodeAttributes","entityKey","entity","mediaType","float","alignment","url","link","link_target","width","height","meta","imageWrapStyle","styledClassName","display","__html","entityToHTML","entityExportFn","options","entityType","customOutput","styleToHTML","unitExportFn","textDecoration","backgroundColor","fontSize","lineHeight","letterSpacing","fontFamily","item","blockToHTML","blockExportFn","blockStyle","blockType","textAlign","textIndent","nodeAttributes","isNaN","previousBlock","nextBlock","previousBlockType","nextBlockType","start","end","nest","htmlToStyle","node","unitImportFn","newStyle","nodeName","parseFloat","htmlToEntity","customInput","alt","title","id","controls","autoplay","loop","poster","attr","href","target","createEntity","parentNode","entityData","embedContent","htmlToBlock","nodeStyle","type","data","blockData","Math","getToHTMLConfig","getFromHTMLConfig","source"],"mappings":"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","sourcesContent":["import React from 'react'\n\nexport const namedColors = {\n  \"aliceblue\": \"#f0f8ff\",\n  \"antiquewhite\": \"#faebd7\",\n  \"aqua\": \"#00ffff\",\n  \"aquamarine\": \"#7fffd4\",\n  \"azure\": \"#f0ffff\",\n  \"beige\": \"#f5f5dc\",\n  \"bisque\": \"#ffe4c4\",\n  \"black\": \"#000000\",\n  \"blanchedalmond\": \"#ffebcd\",\n  \"blue\": \"#0000ff\",\n  \"blueviolet\": \"#8a2be2\",\n  \"brown\": \"#a52a2a\",\n  \"burlywood\": \"#deb887\",\n  \"cadetblue\": \"#5f9ea0\",\n  \"chartreuse\": \"#7fff00\",\n  \"chocolate\": \"#d2691e\",\n  \"coral\": \"#ff7f50\",\n  \"cornflowerblue\": \"#6495ed\",\n  \"cornsilk\": \"#fff8dc\",\n  \"crimson\": \"#dc143c\",\n  \"cyan\": \"#00ffff\",\n  \"darkblue\": \"#00008b\",\n  \"darkcyan\": \"#008b8b\",\n  \"darkgoldenrod\": \"#b8860b\",\n  \"darkgray\": \"#a9a9a9\",\n  \"darkgreen\": \"#006400\",\n  \"darkkhaki\": \"#bdb76b\",\n  \"darkmagenta\": \"#8b008b\",\n  \"darkolivegreen\": \"#556b2f\",\n  \"darkorange\": \"#ff8c00\",\n  \"darkorchid\": \"#9932cc\",\n  \"darkred\": \"#8b0000\",\n  \"darksalmon\": \"#e9967a\",\n  \"darkseagreen\": \"#8fbc8f\",\n  \"darkslateblue\": \"#483d8b\",\n  \"darkslategray\": \"#2f4f4f\",\n  \"darkturquoise\": \"#00ced1\",\n  \"darkviolet\": \"#9400d3\",\n  \"deeppink\": \"#ff1493\",\n  \"deepskyblue\": \"#00bfff\",\n  \"dimgray\": \"#696969\",\n  \"dodgerblue\": \"#1e90ff\",\n  \"firebrick\": \"#b22222\",\n  \"floralwhite\": \"#fffaf0\",\n  \"forestgreen\": \"#228b22\",\n  \"fuchsia\": \"#ff00ff\",\n  \"gainsboro\": \"#dcdcdc\",\n  \"ghostwhite\": \"#f8f8ff\",\n  \"gold\": \"#ffd700\",\n  \"goldenrod\": \"#daa520\",\n  \"gray\": \"#808080\",\n  \"green\": \"#008000\",\n  \"greenyellow\": \"#adff2f\",\n  \"honeydew\": \"#f0fff0\",\n  \"hotpink\": \"#ff69b4\",\n  \"indianred \": \"#cd5c5c\",\n  \"indigo\": \"#4b0082\",\n  \"ivory\": \"#fffff0\",\n  \"khaki\": \"#f0e68c\",\n  \"lavender\": \"#e6e6fa\",\n  \"lavenderblush\": \"#fff0f5\",\n  \"lawngreen\": \"#7cfc00\",\n  \"lemonchiffon\": \"#fffacd\",\n  \"lightblue\": \"#add8e6\",\n  \"lightcoral\": \"#f08080\",\n  \"lightcyan\": \"#e0ffff\",\n  \"lightgoldenrodyellow\": \"#fafad2\",\n  \"lightgrey\": \"#d3d3d3\",\n  \"lightgreen\": \"#90ee90\",\n  \"lightpink\": \"#ffb6c1\",\n  \"lightsalmon\": \"#ffa07a\",\n  \"lightseagreen\": \"#20b2aa\",\n  \"lightskyblue\": \"#87cefa\",\n  \"lightslategray\": \"#778899\",\n  \"lightsteelblue\": \"#b0c4de\",\n  \"lightyellow\": \"#ffffe0\",\n  \"lime\": \"#00ff00\",\n  \"limegreen\": \"#32cd32\",\n  \"linen\": \"#faf0e6\",\n  \"magenta\": \"#ff00ff\",\n  \"maroon\": \"#800000\",\n  \"mediumaquamarine\": \"#66cdaa\",\n  \"mediumblue\": \"#0000cd\",\n  \"mediumorchid\": \"#ba55d3\",\n  \"mediumpurple\": \"#9370d8\",\n  \"mediumseagreen\": \"#3cb371\",\n  \"mediumslateblue\": \"#7b68ee\",\n  \"mediumspringgreen\": \"#00fa9a\",\n  \"mediumturquoise\": \"#48d1cc\",\n  \"mediumvioletred\": \"#c71585\",\n  \"midnightblue\": \"#191970\",\n  \"mintcream\": \"#f5fffa\",\n  \"mistyrose\": \"#ffe4e1\",\n  \"moccasin\": \"#ffe4b5\",\n  \"navajowhite\": \"#ffdead\",\n  \"navy\": \"#000080\",\n  \"oldlace\": \"#fdf5e6\",\n  \"olive\": \"#808000\",\n  \"olivedrab\": \"#6b8e23\",\n  \"orange\": \"#ffa500\",\n  \"orangered\": \"#ff4500\",\n  \"orchid\": \"#da70d6\",\n  \"palegoldenrod\": \"#eee8aa\",\n  \"palegreen\": \"#98fb98\",\n  \"paleturquoise\": \"#afeeee\",\n  \"palevioletred\": \"#d87093\",\n  \"papayawhip\": \"#ffefd5\",\n  \"peachpuff\": \"#ffdab9\",\n  \"peru\": \"#cd853f\",\n  \"pink\": \"#ffc0cb\",\n  \"plum\": \"#dda0dd\",\n  \"powderblue\": \"#b0e0e6\",\n  \"purple\": \"#800080\",\n  \"rebeccapurple\": \"#663399\",\n  \"red\": \"#ff0000\",\n  \"rosybrown\": \"#bc8f8f\",\n  \"royalblue\": \"#4169e1\",\n  \"saddlebrown\": \"#8b4513\",\n  \"salmon\": \"#fa8072\",\n  \"sandybrown\": \"#f4a460\",\n  \"seagreen\": \"#2e8b57\",\n  \"seashell\": \"#fff5ee\",\n  \"sienna\": \"#a0522d\",\n  \"silver\": \"#c0c0c0\",\n  \"skyblue\": \"#87ceeb\",\n  \"slateblue\": \"#6a5acd\",\n  \"slategray\": \"#708090\",\n  \"snow\": \"#fffafa\",\n  \"springgreen\": \"#00ff7f\",\n  \"steelblue\": \"#4682b4\",\n  \"tan\": \"#d2b48c\",\n  \"teal\": \"#008080\",\n  \"thistle\": \"#d8bfd8\",\n  \"tomato\": \"#ff6347\",\n  \"turquoise\": \"#40e0d0\",\n  \"violet\": \"#ee82ee\",\n  \"wheat\": \"#f5deb3\",\n  \"white\": \"#ffffff\",\n  \"whitesmoke\": \"#f5f5f5\",\n  \"yellow\": \"#ffff00\",\n  \"yellowgreen\": \"#9acd32\"\n}\n\nconst getStyleValue = style => style.split('-')[1]\nconst defaultUnitExportFn = unit => unit + 'px'\nconst defaultUnitImportFn = unit => unit.replace('px', '')\n\nconst ignoredNodeAttributes = ['style']\nconst ignoredEntityNodeAttributes = ['style', 'href', 'target', 'alt', 'title', 'id', 'controls', 'autoplay', 'loop', 'poster']\n\nconst spreadNodeAttributes = (attributesObject) => {\n  return Object.keys(attributesObject).reduce((attributeString, attributeName) => {\n    return `${attributeString} ${attributeName}=\"${attributesObject[attributeName]}\"`\n  }, '').replace(/^\\s$/, '')\n}\n\nexport const defaultFontFamilies = [{\n    name: 'Araial',\n    family: 'Arial, Helvetica, sans-serif'\n  }, {\n    name: 'Georgia',\n    family: 'Georgia, serif'\n  }, {\n    name: 'Impact',\n    family: 'Impact, serif'\n  }, {\n    name: 'Monospace',\n    family: '\"Courier New\", Courier, monospace'\n  }, {\n    name: 'Tahoma',\n    family: \"tahoma, arial, 'Hiragino Sans GB', 宋体, sans-serif\"\n}]\n\nexport const getHexColor = (color) => {\n\n  color = color.replace('color:', '').replace(';', '').replace(' ', '')\n\n  if (/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(color)) {\n    return color\n  } else if (namedColors[color]) {\n    return namedColors[color]\n  } else if (color.indexOf('rgb') === 0) {\n\n    let rgbArray = color.split(',')\n    let convertedColor = rgbArray.length < 3 ? null : '#' + [rgbArray[0], rgbArray[1], rgbArray[2]].map(x => {\n      const hex = parseInt(x.replace(/\\D/g, ''), 10).toString(16)\n      return hex.length === 1 ? '0' + hex : hex\n    }).join('')\n\n    return /^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(convertedColor) ? convertedColor : null\n\n  } else {\n    return null\n  }\n\n}\n\nexport const blocks = {\n  'header-one': 'h1',\n  'header-two': 'h2',\n  'header-three': 'h3',\n  'header-four': 'h4',\n  'header-five': 'h5',\n  'header-six': 'h6',\n  'unstyled': 'p',\n  'blockquote': 'blockquote'\n}\n\nconst blockTypes = Object.keys(blocks)\nconst blockNames = blockTypes.map(key => blocks[key])\n\nconst convertAtomicBlock = (block, contentState, blockNodeAttributes) => {\n\n  if (!block || !block.key) {\n    return <p></p>\n  }\n\n  const contentBlock = contentState.getBlockForKey(block.key)\n\n  let { class: className, ...nodeAttrAsProps } = blockNodeAttributes\n  nodeAttrAsProps.className = className\n\n  if (!contentBlock) {\n    return <p></p>\n  }\n\n  const entityKey = contentBlock.getEntityAt(0)\n\n  if (!entityKey) {\n    return <p></p>\n  }\n\n  const entity = contentState.getEntity(entityKey)\n  const mediaType = entity.getType().toLowerCase()\n\n  let { float, alignment } = block.data\n  let { url, link, link_target, width, height, meta } = entity.getData()\n\n  if (mediaType === 'image') {\n\n    let imageWrapStyle = {}\n    let styledClassName = ''\n\n    if (float) {\n      imageWrapStyle.float = float\n      styledClassName += ' float-' + float\n    } else if (alignment) {\n      imageWrapStyle.textAlign = alignment\n      styledClassName += ' align-' + alignment\n    }\n\n    if (link) {\n      return (\n        <div className={\"media-wrap image-wrap\" + styledClassName} style={imageWrapStyle}>\n          <a style={{display:'inline-block'}} href={link} target={link_target}>\n            <img {...nodeAttrAsProps} {...meta} src={url} width={width} height={height} style={{width, height}} />\n          </a>\n        </div>\n      )\n    } else {\n      return (\n        <div className={\"media-wrap image-wrap\" + styledClassName} style={imageWrapStyle}>\n          <img {...nodeAttrAsProps} {...meta} src={url} width={width} height={height} style={{width, height}}/>\n        </div>\n      )\n    }\n\n  } else if (mediaType === 'audio') {\n    return <div className=\"media-wrap audio-wrap\"><audio controls {...nodeAttrAsProps} {...meta} src={url} /></div>\n  } else if (mediaType === 'video') {\n    return <div className=\"media-wrap video-wrap\"><video controls {...nodeAttrAsProps} {...meta} src={url} width={width} height={height} /></div>\n  } else if (mediaType === 'embed') {\n    return <div className=\"media-wrap embed-wrap\"><div dangerouslySetInnerHTML={{__html: url}}/></div>\n  } else if (mediaType === 'hr') {\n    return <hr></hr>\n  } else {\n    return <p></p>\n  }\n\n}\n\nconst entityToHTML = (options) => (entity, originalText) => {\n\n  const { entityExportFn } = options\n  const entityType = entity.type.toLowerCase()\n\n  if (entityExportFn) {\n    const customOutput = entityExportFn(entity, originalText)\n    if (customOutput) {\n      return customOutput\n    }\n  }\n\n  if (entityType === 'link') {\n    let { class: className, ...nodeAttrAsProps } = entity.data.nodeAttributes || {}\n    nodeAttrAsProps.className = className\n    return <a href={entity.data.href} target={entity.data.target} {...nodeAttrAsProps}/>\n  }\n\n}\n\nconst styleToHTML = (options) => (style) => {\n\n  const unitExportFn = options.unitExportFn || defaultUnitExportFn\n\n  if (options.styleExportFn) {\n    const customOutput = options.styleExportFn(style, options)\n    if (customOutput) {\n      return customOutput\n    }\n  }\n\n  style = style.toLowerCase()\n\n  if (style === 'strikethrough') {\n    return <span style={{textDecoration: 'line-through'}}/>\n  } else if (style === 'superscript') {\n    return <sup/>\n  } else if (style === 'subscript') {\n    return <sub/>\n  } else if (style.indexOf('color-') === 0) {\n    return <span style={{color: '#' + getStyleValue(style)}}/>\n  } else if (style.indexOf('bgcolor-') === 0) {\n    return <span style={{backgroundColor: '#' + getStyleValue(style)}}/>\n  } else if (style.indexOf('fontsize-') === 0) {\n    return <span style={{fontSize: unitExportFn(getStyleValue(style), 'font-size', 'html')}}/>\n  } else if (style.indexOf('lineheight-') === 0) {\n    return <span style={{lineHeight: unitExportFn(getStyleValue(style), 'line-height', 'html')}}/> \n  } else if (style.indexOf('letterspacing-') === 0) {\n    return <span style={{letterSpacing: unitExportFn(getStyleValue(style), 'letter-spacing', 'html')}}/>\n  } else if (style.indexOf('fontfamily-') === 0) {\n    let fontFamily = options.fontFamilies.find((item) => item.name.toLowerCase() === getStyleValue(style))\n    if (!fontFamily) return\n    return <span style={{fontFamily: fontFamily.family}}/>\n  }\n\n}\n\nconst blockToHTML = (options) => (block) => {\n\n  const { blockExportFn, contentState } = options\n\n  if (blockExportFn) {\n    const customOutput = blockExportFn(contentState, block)\n    if (customOutput) {\n      return customOutput\n    }\n  }\n\n  let blockStyle = ''\n\n  const blockType = block.type.toLowerCase()\n  const { textAlign, textIndent, nodeAttributes = {} } = block.data\n  const attributeString = spreadNodeAttributes(nodeAttributes)\n\n  if (textAlign || textIndent) {\n\n    blockStyle = ' style=\"'\n\n    if (textAlign) {\n      blockStyle += `text-align:${textAlign};`\n    }\n\n    if (textIndent && !isNaN(textIndent) && textIndent > 0) {\n      blockStyle += `text-indent:${textIndent * 2}em;`\n    }\n\n    blockStyle += '\"'\n\n  }\n\n  if (blockType === 'atomic') {\n    return convertAtomicBlock(block, contentState, nodeAttributes)\n  } else if (blockType === 'code-block') {\n\n    const previousBlock = contentState.getBlockBefore(block.key)\n    const nextBlock = contentState.getBlockAfter(block.key)\n    const previousBlockType = previousBlock && previousBlock.getType()\n    const nextBlockType = nextBlock && nextBlock.getType()\n\n    let start = ''\n    let end = ''\n\n    if (previousBlockType !== 'code-block') {\n      start = `<pre${attributeString}><code>`\n    } else {\n      start = ''\n    }\n\n    if (nextBlockType !== 'code-block') {\n      end = '</code></pre>'\n    } else {\n      end = '<br/>'\n    }\n\n    return { start, end }\n\n  } else if (blocks[blockType]) {\n    return {\n      start: `<${blocks[blockType]}${blockStyle}${attributeString}>`,\n      end: `</${blocks[blockType]}>`\n    }\n  } else if (blockType === 'unordered-list-item') {\n    return {\n      start: `<li${blockStyle}${attributeString}>`,\n      end: '</li>',\n      nest: <ul/>\n    }\n  } else if (blockType === 'ordered-list-item') {\n    return {\n      start: `<li${blockStyle}${attributeString}>`,\n      end: '</li>',\n      nest: <ol/>\n    }\n  }\n\n}\n\nconst htmlToStyle = (options, source) => (nodeName, node, currentStyle) => {\n\n  if (!node || !node.style) {\n    return currentStyle\n  }\n\n  const unitImportFn = options.unitImportFn || defaultUnitImportFn\n  let newStyle = currentStyle;\n\n  [].forEach.call(node.style, (style) => {\n\n    if (nodeName === 'span' && style === 'color') {\n      let color = getHexColor(node.style.color)\n      newStyle = color ? newStyle.add('COLOR-' + color.replace('#', '').toUpperCase()) : newStyle\n    } else if (nodeName === 'span' && style === 'background-color') {\n      let color = getHexColor(node.style.backgroundColor)\n      newStyle = color ? newStyle.add('BGCOLOR-' + color.replace('#', '').toUpperCase()) : newStyle\n    } else if (nodeName === 'span' && style === 'font-size') {\n      newStyle = newStyle.add('FONTSIZE-' + unitImportFn(node.style.fontSize, 'font-size', source))\n    } else if (nodeName === 'span' && style === 'line-height' && !isNaN(parseFloat(node.style.lineHeight, 10))) {\n      newStyle = newStyle.add('LINEHEIGHT-' + unitImportFn(node.style.lineHeight, 'line-height', source))\n    } else if (nodeName === 'span' && style === 'letter-spacing' && !isNaN(parseFloat(node.style.letterSpacing, 10))) {\n      newStyle = newStyle.add('LETTERSPACING-' + unitImportFn(node.style.letterSpacing, 'letter-spacing', source))\n    } else if (nodeName === 'span' && style === 'text-decoration') {\n      if (node.style.textDecoration === 'line-through') {\n        newStyle = newStyle.add('STRIKETHROUGH')\n      } else if (node.style.textDecoration === 'underline') {\n        newStyle = newStyle.add('UNDERLINE')\n      }\n    } else if (nodeName === 'span' && style === 'font-family') {\n      let fontFamily = options.fontFamilies.find((item) => item.family.toLowerCase() === node.style.fontFamily.toLowerCase())\n      if (!fontFamily) return;\n      newStyle = newStyle.add('FONTFAMILY-' + fontFamily.name.toUpperCase())\n    }\n\n  })\n\n  if (nodeName === 'sup') {\n    newStyle = newStyle.add('SUPERSCRIPT')\n  } else if (nodeName === 'sub') {\n    newStyle = newStyle.add('SUBSCRIPT')\n  }\n\n  options.styleImportFn && (newStyle = options.styleImportFn(nodeName, node, newStyle, source) || newStyle)\n  return newStyle\n\n}\n\nconst htmlToEntity = (options, source) => (nodeName, node, createEntity) => {\n\n  if (options && options.entityImportFn) {\n    const customInput = options.entityImportFn(nodeName, node, createEntity, source)\n    if (customInput) {\n      return customInput\n    }\n  }\n\n  nodeName = nodeName.toLowerCase()\n\n  const { alt, title, id, controls, autoplay, loop, poster } = node\n  let meta = {}\n  let nodeAttributes = {}\n\n  id && (meta.id = id)\n  alt && (meta.alt = alt)\n  title && (meta.title = title)\n  controls && (meta.controls = controls)\n  autoplay && (meta.autoPlay = autoplay)\n  loop && (meta.loop = loop)\n  poster && (meta.poster = poster)\n\n  node.attributes && Object.keys(node.attributes).forEach((key) => {\n    let attr = node.attributes[key]\n    ignoredEntityNodeAttributes.indexOf(attr.name) === -1 && (nodeAttributes[attr.name] = attr.value);\n  })\n\n  if (nodeName === 'a' && !node.querySelectorAll('img').length) {\n    let href = node.getAttribute('href')\n    let target = node.getAttribute('target')\n    return createEntity('LINK', 'MUTABLE',{ href, target, nodeAttributes })\n  } else if (nodeName === 'audio') {\n    return createEntity('AUDIO', 'IMMUTABLE',{ url: node.getAttribute('src'), meta, nodeAttributes }) \n  } else if (nodeName === 'video') {\n    return createEntity('VIDEO', 'IMMUTABLE',{ url: node.getAttribute('src'), meta, nodeAttributes }) \n  } else if (nodeName === 'img') {\n\n    let parentNode = node.parentNode\n    let entityData = { meta }\n    let { width, height } = node.style\n\n    entityData.url = node.getAttribute('src')\n    width && (entityData.width = width)\n    height && (entityData.height = height)\n\n    if (parentNode.nodeName.toLowerCase() === 'a') {\n      entityData.link = parentNode.getAttribute('href')\n      entityData.link_target = parentNode.getAttribute('target')\n    }\n\n    return createEntity('IMAGE', 'IMMUTABLE', entityData) \n\n  } else if (nodeName === 'hr') {\n    return createEntity('HR', 'IMMUTABLE', {}) \n  } else if (node.parentNode && node.parentNode.classList.contains('embed-wrap')) {\n\n    const embedContent = node.innerHTML || node.outerHTML\n\n    if (embedContent) {\n      return createEntity('EMBED', 'IMMUTABLE', {\n        url: embedContent\n      })   \n    }\n\n  }\n\n}\n\nconst htmlToBlock = (options, source) => (nodeName, node) => {\n\n  if (options && options.blockImportFn) {\n    const customInput = options.blockImportFn(nodeName, node, source)\n    if (customInput) {\n      return customInput\n    }\n  }\n\n  let nodeAttributes = {}\n  let nodeStyle = node.style || {}\n\n  node.attributes && Object.keys(node.attributes).forEach((key) => {\n    let attr = node.attributes[key]\n    ignoredNodeAttributes.indexOf(attr.name) === -1 && (nodeAttributes[attr.name] = attr.value);\n  })\n\n  if (node.classList && node.classList.contains('media-wrap')) {\n\n    return {\n      type: 'atomic',\n      data: {\n        nodeAttributes: nodeAttributes,\n        float: nodeStyle.float,\n        alignment: nodeStyle.textAlign\n      }\n    }\n\n  } else if (nodeName === 'img') {\n\n    return {\n      type: 'atomic',\n      data: {\n        nodeAttributes: nodeAttributes,\n        float: nodeStyle.float,\n        alignment: nodeStyle.textAlign\n      }\n    }\n\n  } else if (nodeName === 'hr') {\n\n    return {\n      type: 'atomic',\n      data: { nodeAttributes }\n    }\n\n  } else if (nodeName === 'pre') {\n\n    node.innerHTML = node.innerHTML.replace(/<code(.*?)>/g, '').replace(/<\\/code>/g, '')\n\n    return {\n      type: 'code-block',\n      data: { nodeAttributes }\n    }\n\n  } else if (blockNames.indexOf(nodeName) !== -1) {\n\n    const blockData = { nodeAttributes }\n\n    if (nodeStyle.textAlign) {\n      blockData.textAlign = nodeStyle.textAlign\n    }\n\n    if (nodeStyle.textIndent) {\n      blockData.textIndent = /^\\d+em$/.test(nodeStyle.textIndent) ? Math.ceil(parseInt(nodeStyle.textIndent, 10) / 2) : 1\n    }\n\n    return {\n      type: blockTypes[blockNames.indexOf(nodeName)],\n      data: blockData\n    }\n\n  }\n\n}\n\nexport const getToHTMLConfig = (options) => {\n\n  return {\n    styleToHTML: styleToHTML(options),\n    entityToHTML: entityToHTML(options),\n    blockToHTML: blockToHTML(options)\n  }\n\n}\n\nexport const getFromHTMLConfig = (options, source = 'unknow') => {\n\n  return { \n    htmlToStyle: htmlToStyle(options, source),\n    htmlToEntity: htmlToEntity(options, source),\n    htmlToBlock: htmlToBlock(options, source)\n  }\n\n}"]},"metadata":{},"sourceType":"script"}